Warning : Terminal "UMINUS" was declared but never used
Warning : Terminal "MEGGYSETAUXLEDS" was declared but never used
Warning : Terminal "EXTENDS" was declared but never used
Warning : Terminal "LENGTH" was declared but never used
Warning : *** Shift/Reduce conflict found in state #109
  between exp ::= identifier (*) 
  and     statement ::= identifier (*) LBRACKET exp RBRACKET ASSIGN exp SEMI 
  under symbol LBRACKET
  Resolved in favor of shifting.

Warning : *** Reduce/Reduce conflict found in state #45
  between exp ::= identifier (*) 
  and     custom_type ::= identifier (*) 
  under symbols: {}
  Resolved in favor of the second production.

Warning : *** Shift/Reduce conflict found in state #45
  between exp ::= identifier (*) 
  and     statement ::= identifier (*) LBRACKET exp RBRACKET ASSIGN exp SEMI 
  under symbol LBRACKET
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #45
  between custom_type ::= identifier (*) 
  and     statement ::= identifier (*) LBRACKET exp RBRACKET ASSIGN exp SEMI 
  under symbol LBRACKET
  Resolved in favor of shifting.

Error : *** More conflicts encountered than expected -- parser generation aborted
===== Terminals =====
[0]EOF [1]error [2]PLUS [3]MINUS [4]TIMES 
[5]LPAREN [6]RPAREN [7]LBRACE [8]RBRACE [9]BOOLEAN 
[10]INT [11]BYTE [12]MAIN [13]IMPORT [14]IF 
[15]ELSE [16]LT [17]EQUAL [18]AND [19]NOT 
[20]WHILE [21]COMMA [22]DOT [23]NEW [24]PUBLIC 
[25]RETURN [26]STATIC [27]STRING [28]VOID [29]CLASS 
[30]EXTENDS [31]LBRACKET [32]RBRACKET [33]LENGTH [34]SEMI 
[35]ASSIGN [36]MEGGY [37]MEGGYCOLOR [38]MEGGYBUTTON [39]MEGGYTONE 
[40]MEGGYSETPIXEL [41]MEGGYSETAUXLEDS [42]MEGGYTONESTART [43]MEGGYDELAY [44]MEGGYGETPIXEL 
[45]MEGGYCHECKBUTTON [46]INT_LITERAL [47]ID [48]TRUE [49]FALSE 
[50]COLOR_LITERAL [51]BUTTON_LITERAL [52]TONE_LITERAL [53]THIS [54]UMINUS 


===== Non terminals =====
[0]program [1]exp [2]statement [3]statement_list [4]block_statement 
[5]main_class [6]type [7]primitive_type [8]custom_type [9]class_declaration 
[10]class_declaration_list [11]method_declaration [12]method_declaration_list [13]var_declaration [14]var_declaration_list 
[15]formal_param [16]formal_param_list [17]return_stmt [18]exp_args_list [19]identifier 
[20]NT$0 

===== Productions =====
[0] $START ::= program EOF 
[1] program ::= IMPORT MEGGY SEMI main_class class_declaration_list 
[2] NT$0 ::= 
[3] main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement NT$0 RBRACE 
[4] class_declaration_list ::= class_declaration_list class_declaration 
[5] class_declaration_list ::= 
[6] class_declaration ::= CLASS identifier LBRACE var_declaration_list method_declaration_list RBRACE 
[7] formal_param_list ::= formal_param_list COMMA formal_param 
[8] formal_param_list ::= formal_param 
[9] formal_param_list ::= 
[10] formal_param ::= type identifier 
[11] method_declaration ::= PUBLIC type identifier LPAREN formal_param_list RPAREN LBRACE var_declaration_list statement_list return_stmt RBRACE 
[12] method_declaration_list ::= method_declaration_list method_declaration 
[13] method_declaration_list ::= 
[14] var_declaration ::= type identifier SEMI 
[15] var_declaration_list ::= var_declaration_list var_declaration 
[16] var_declaration_list ::= 
[17] return_stmt ::= RETURN exp SEMI 
[18] return_stmt ::= 
[19] type ::= primitive_type 
[20] type ::= custom_type 
[21] primitive_type ::= BOOLEAN 
[22] primitive_type ::= BYTE 
[23] primitive_type ::= INT 
[24] primitive_type ::= VOID 
[25] primitive_type ::= MEGGYCOLOR 
[26] primitive_type ::= MEGGYBUTTON 
[27] primitive_type ::= MEGGYTONE 
[28] primitive_type ::= INT LBRACKET RBRACKET 
[29] custom_type ::= identifier 
[30] statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI 
[31] statement ::= MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI 
[32] statement ::= MEGGYDELAY LPAREN exp RPAREN SEMI 
[33] statement ::= exp DOT identifier LPAREN exp_args_list RPAREN SEMI 
[34] statement ::= IF LPAREN exp RPAREN statement 
[35] statement ::= IF LPAREN exp RPAREN statement ELSE statement 
[36] statement ::= WHILE LPAREN exp RPAREN statement 
[37] statement ::= block_statement 
[38] statement ::= identifier ASSIGN exp SEMI 
[39] statement ::= identifier LBRACKET exp RBRACKET ASSIGN exp SEMI 
[40] statement_list ::= statement statement_list 
[41] statement_list ::= 
[42] block_statement ::= LBRACE statement_list RBRACE 
[43] exp_args_list ::= exp_args_list COMMA exp 
[44] exp_args_list ::= exp 
[45] exp_args_list ::= 
[46] exp ::= exp AND exp 
[47] exp ::= exp LT exp 
[48] exp ::= exp EQUAL exp 
[49] exp ::= exp PLUS exp 
[50] exp ::= exp MINUS exp 
[51] exp ::= exp TIMES exp 
[52] exp ::= MINUS exp 
[53] exp ::= exp DOT identifier LPAREN exp_args_list RPAREN 
[54] exp ::= MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN 
[55] exp ::= MEGGYCHECKBUTTON LPAREN exp RPAREN 
[56] exp ::= LPAREN BYTE RPAREN exp 
[57] exp ::= INT_LITERAL 
[58] exp ::= COLOR_LITERAL 
[59] exp ::= BUTTON_LITERAL 
[60] exp ::= TONE_LITERAL 
[61] exp ::= TRUE 
[62] exp ::= FALSE 
[63] exp ::= NOT exp 
[64] exp ::= LPAREN exp RPAREN 
[65] exp ::= identifier 
[66] exp ::= THIS 
[67] exp ::= NEW identifier LPAREN RPAREN 
[68] exp ::= exp LBRACKET exp RBRACKET 
[69] identifier ::= ID 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [program ::= (*) IMPORT MEGGY SEMI main_class class_declaration_list , {EOF }]
  [$START ::= (*) program EOF , {EOF }]
}
transition on IMPORT to state [2]
transition on program to state [1]

-------------------
lalr_state [1]: {
  [$START ::= program (*) EOF , {EOF }]
}
transition on EOF to state [179]

-------------------
lalr_state [2]: {
  [program ::= IMPORT (*) MEGGY SEMI main_class class_declaration_list , {EOF }]
}
transition on MEGGY to state [3]

-------------------
lalr_state [3]: {
  [program ::= IMPORT MEGGY (*) SEMI main_class class_declaration_list , {EOF }]
}
transition on SEMI to state [4]

-------------------
lalr_state [4]: {
  [program ::= IMPORT MEGGY SEMI (*) main_class class_declaration_list , {EOF }]
  [main_class ::= (*) CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement NT$0 RBRACE , {EOF CLASS }]
}
transition on main_class to state [6]
transition on CLASS to state [5]

-------------------
lalr_state [5]: {
  [main_class ::= CLASS (*) identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement NT$0 RBRACE , {EOF CLASS }]
  [identifier ::= (*) ID , {LBRACE }]
}
transition on identifier to state [164]
transition on ID to state [10]

-------------------
lalr_state [6]: {
  [class_declaration_list ::= (*) , {EOF CLASS }]
  [program ::= IMPORT MEGGY SEMI main_class (*) class_declaration_list , {EOF }]
  [class_declaration_list ::= (*) class_declaration_list class_declaration , {EOF CLASS }]
}
transition on class_declaration_list to state [7]

-------------------
lalr_state [7]: {
  [program ::= IMPORT MEGGY SEMI main_class class_declaration_list (*) , {EOF }]
  [class_declaration_list ::= class_declaration_list (*) class_declaration , {EOF CLASS }]
  [class_declaration ::= (*) CLASS identifier LBRACE var_declaration_list method_declaration_list RBRACE , {EOF CLASS }]
}
transition on class_declaration to state [9]
transition on CLASS to state [8]

-------------------
lalr_state [8]: {
  [class_declaration ::= CLASS (*) identifier LBRACE var_declaration_list method_declaration_list RBRACE , {EOF CLASS }]
  [identifier ::= (*) ID , {LBRACE }]
}
transition on identifier to state [11]
transition on ID to state [10]

-------------------
lalr_state [9]: {
  [class_declaration_list ::= class_declaration_list class_declaration (*) , {EOF CLASS }]
}

-------------------
lalr_state [10]: {
  [identifier ::= ID (*) , {PLUS MINUS TIMES LPAREN RPAREN LBRACE LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI ASSIGN ID }]
}

-------------------
lalr_state [11]: {
  [class_declaration ::= CLASS identifier (*) LBRACE var_declaration_list method_declaration_list RBRACE , {EOF CLASS }]
}
transition on LBRACE to state [12]

-------------------
lalr_state [12]: {
  [var_declaration_list ::= (*) , {RBRACE BOOLEAN INT BYTE PUBLIC VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE ID }]
  [var_declaration_list ::= (*) var_declaration_list var_declaration , {RBRACE BOOLEAN INT BYTE PUBLIC VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE ID }]
  [class_declaration ::= CLASS identifier LBRACE (*) var_declaration_list method_declaration_list RBRACE , {EOF CLASS }]
}
transition on var_declaration_list to state [13]

-------------------
lalr_state [13]: {
  [type ::= (*) custom_type , {ID }]
  [var_declaration ::= (*) type identifier SEMI , {RBRACE BOOLEAN INT BYTE PUBLIC VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE ID }]
  [primitive_type ::= (*) INT LBRACKET RBRACKET , {ID }]
  [primitive_type ::= (*) MEGGYCOLOR , {ID }]
  [primitive_type ::= (*) BYTE , {ID }]
  [type ::= (*) primitive_type , {ID }]
  [method_declaration_list ::= (*) , {RBRACE PUBLIC }]
  [primitive_type ::= (*) MEGGYTONE , {ID }]
  [primitive_type ::= (*) VOID , {ID }]
  [primitive_type ::= (*) BOOLEAN , {ID }]
  [var_declaration_list ::= var_declaration_list (*) var_declaration , {RBRACE BOOLEAN INT BYTE PUBLIC VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE ID }]
  [class_declaration ::= CLASS identifier LBRACE var_declaration_list (*) method_declaration_list RBRACE , {EOF CLASS }]
  [method_declaration_list ::= (*) method_declaration_list method_declaration , {RBRACE PUBLIC }]
  [custom_type ::= (*) identifier , {ID }]
  [primitive_type ::= (*) MEGGYBUTTON , {ID }]
  [identifier ::= (*) ID , {ID }]
  [primitive_type ::= (*) INT , {ID }]
}
transition on BYTE to state [26]
transition on var_declaration to state [25]
transition on type to state [24]
transition on MEGGYCOLOR to state [23]
transition on MEGGYBUTTON to state [22]
transition on ID to state [10]
transition on primitive_type to state [21]
transition on identifier to state [20]
transition on MEGGYTONE to state [19]
transition on VOID to state [18]
transition on BOOLEAN to state [17]
transition on custom_type to state [16]
transition on method_declaration_list to state [15]
transition on INT to state [14]

-------------------
lalr_state [14]: {
  [primitive_type ::= INT (*) , {ID }]
  [primitive_type ::= INT (*) LBRACKET RBRACKET , {ID }]
}
transition on LBRACKET to state [162]

-------------------
lalr_state [15]: {
  [class_declaration ::= CLASS identifier LBRACE var_declaration_list method_declaration_list (*) RBRACE , {EOF CLASS }]
  [method_declaration_list ::= method_declaration_list (*) method_declaration , {RBRACE PUBLIC }]
  [method_declaration ::= (*) PUBLIC type identifier LPAREN formal_param_list RPAREN LBRACE var_declaration_list statement_list return_stmt RBRACE , {RBRACE PUBLIC }]
}
transition on method_declaration to state [31]
transition on PUBLIC to state [30]
transition on RBRACE to state [29]

-------------------
lalr_state [16]: {
  [type ::= custom_type (*) , {ID }]
}

-------------------
lalr_state [17]: {
  [primitive_type ::= BOOLEAN (*) , {ID }]
}

-------------------
lalr_state [18]: {
  [primitive_type ::= VOID (*) , {ID }]
}

-------------------
lalr_state [19]: {
  [primitive_type ::= MEGGYTONE (*) , {ID }]
}

-------------------
lalr_state [20]: {
  [custom_type ::= identifier (*) , {ID }]
}

-------------------
lalr_state [21]: {
  [type ::= primitive_type (*) , {ID }]
}

-------------------
lalr_state [22]: {
  [primitive_type ::= MEGGYBUTTON (*) , {ID }]
}

-------------------
lalr_state [23]: {
  [primitive_type ::= MEGGYCOLOR (*) , {ID }]
}

-------------------
lalr_state [24]: {
  [var_declaration ::= type (*) identifier SEMI , {MINUS LPAREN LBRACE RBRACE BOOLEAN INT BYTE IF NOT WHILE NEW PUBLIC RETURN VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [identifier ::= (*) ID , {SEMI }]
}
transition on identifier to state [27]
transition on ID to state [10]

-------------------
lalr_state [25]: {
  [var_declaration_list ::= var_declaration_list var_declaration (*) , {MINUS LPAREN LBRACE RBRACE BOOLEAN INT BYTE IF NOT WHILE NEW PUBLIC RETURN VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [26]: {
  [primitive_type ::= BYTE (*) , {ID }]
}

-------------------
lalr_state [27]: {
  [var_declaration ::= type identifier (*) SEMI , {MINUS LPAREN LBRACE RBRACE BOOLEAN INT BYTE IF NOT WHILE NEW PUBLIC RETURN VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on SEMI to state [28]

-------------------
lalr_state [28]: {
  [var_declaration ::= type identifier SEMI (*) , {MINUS LPAREN LBRACE RBRACE BOOLEAN INT BYTE IF NOT WHILE NEW PUBLIC RETURN VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [29]: {
  [class_declaration ::= CLASS identifier LBRACE var_declaration_list method_declaration_list RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [30]: {
  [type ::= (*) custom_type , {ID }]
  [method_declaration ::= PUBLIC (*) type identifier LPAREN formal_param_list RPAREN LBRACE var_declaration_list statement_list return_stmt RBRACE , {RBRACE PUBLIC }]
  [primitive_type ::= (*) INT LBRACKET RBRACKET , {ID }]
  [primitive_type ::= (*) MEGGYCOLOR , {ID }]
  [primitive_type ::= (*) BYTE , {ID }]
  [type ::= (*) primitive_type , {ID }]
  [primitive_type ::= (*) MEGGYTONE , {ID }]
  [primitive_type ::= (*) VOID , {ID }]
  [primitive_type ::= (*) BOOLEAN , {ID }]
  [custom_type ::= (*) identifier , {ID }]
  [primitive_type ::= (*) MEGGYBUTTON , {ID }]
  [identifier ::= (*) ID , {ID }]
  [primitive_type ::= (*) INT , {ID }]
}
transition on BYTE to state [26]
transition on type to state [32]
transition on MEGGYCOLOR to state [23]
transition on MEGGYBUTTON to state [22]
transition on ID to state [10]
transition on primitive_type to state [21]
transition on identifier to state [20]
transition on MEGGYTONE to state [19]
transition on VOID to state [18]
transition on BOOLEAN to state [17]
transition on custom_type to state [16]
transition on INT to state [14]

-------------------
lalr_state [31]: {
  [method_declaration_list ::= method_declaration_list method_declaration (*) , {RBRACE PUBLIC }]
}

-------------------
lalr_state [32]: {
  [method_declaration ::= PUBLIC type (*) identifier LPAREN formal_param_list RPAREN LBRACE var_declaration_list statement_list return_stmt RBRACE , {RBRACE PUBLIC }]
  [identifier ::= (*) ID , {LPAREN }]
}
transition on identifier to state [33]
transition on ID to state [10]

-------------------
lalr_state [33]: {
  [method_declaration ::= PUBLIC type identifier (*) LPAREN formal_param_list RPAREN LBRACE var_declaration_list statement_list return_stmt RBRACE , {RBRACE PUBLIC }]
}
transition on LPAREN to state [34]

-------------------
lalr_state [34]: {
  [type ::= (*) custom_type , {ID }]
  [formal_param_list ::= (*) formal_param , {RPAREN COMMA }]
  [primitive_type ::= (*) INT LBRACKET RBRACKET , {ID }]
  [primitive_type ::= (*) MEGGYCOLOR , {ID }]
  [primitive_type ::= (*) BYTE , {ID }]
  [type ::= (*) primitive_type , {ID }]
  [formal_param ::= (*) type identifier , {RPAREN COMMA }]
  [formal_param_list ::= (*) formal_param_list COMMA formal_param , {RPAREN COMMA }]
  [primitive_type ::= (*) MEGGYTONE , {ID }]
  [primitive_type ::= (*) VOID , {ID }]
  [primitive_type ::= (*) BOOLEAN , {ID }]
  [formal_param_list ::= (*) , {RPAREN COMMA }]
  [custom_type ::= (*) identifier , {ID }]
  [primitive_type ::= (*) MEGGYBUTTON , {ID }]
  [identifier ::= (*) ID , {ID }]
  [primitive_type ::= (*) INT , {ID }]
  [method_declaration ::= PUBLIC type identifier LPAREN (*) formal_param_list RPAREN LBRACE var_declaration_list statement_list return_stmt RBRACE , {RBRACE PUBLIC }]
}
transition on BYTE to state [26]
transition on formal_param_list to state [37]
transition on formal_param to state [36]
transition on type to state [35]
transition on MEGGYCOLOR to state [23]
transition on MEGGYBUTTON to state [22]
transition on ID to state [10]
transition on primitive_type to state [21]
transition on identifier to state [20]
transition on MEGGYTONE to state [19]
transition on VOID to state [18]
transition on BOOLEAN to state [17]
transition on custom_type to state [16]
transition on INT to state [14]

-------------------
lalr_state [35]: {
  [formal_param ::= type (*) identifier , {RPAREN COMMA }]
  [identifier ::= (*) ID , {RPAREN COMMA }]
}
transition on identifier to state [161]
transition on ID to state [10]

-------------------
lalr_state [36]: {
  [formal_param_list ::= formal_param (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [37]: {
  [formal_param_list ::= formal_param_list (*) COMMA formal_param , {RPAREN COMMA }]
  [method_declaration ::= PUBLIC type identifier LPAREN formal_param_list (*) RPAREN LBRACE var_declaration_list statement_list return_stmt RBRACE , {RBRACE PUBLIC }]
}
transition on RPAREN to state [39]
transition on COMMA to state [38]

-------------------
lalr_state [38]: {
  [type ::= (*) custom_type , {ID }]
  [primitive_type ::= (*) INT LBRACKET RBRACKET , {ID }]
  [primitive_type ::= (*) MEGGYCOLOR , {ID }]
  [primitive_type ::= (*) BYTE , {ID }]
  [type ::= (*) primitive_type , {ID }]
  [formal_param_list ::= formal_param_list COMMA (*) formal_param , {RPAREN COMMA }]
  [formal_param ::= (*) type identifier , {RPAREN COMMA }]
  [primitive_type ::= (*) MEGGYTONE , {ID }]
  [primitive_type ::= (*) VOID , {ID }]
  [primitive_type ::= (*) BOOLEAN , {ID }]
  [custom_type ::= (*) identifier , {ID }]
  [primitive_type ::= (*) MEGGYBUTTON , {ID }]
  [identifier ::= (*) ID , {ID }]
  [primitive_type ::= (*) INT , {ID }]
}
transition on BYTE to state [26]
transition on formal_param to state [160]
transition on type to state [35]
transition on MEGGYCOLOR to state [23]
transition on MEGGYBUTTON to state [22]
transition on ID to state [10]
transition on primitive_type to state [21]
transition on identifier to state [20]
transition on MEGGYTONE to state [19]
transition on VOID to state [18]
transition on BOOLEAN to state [17]
transition on custom_type to state [16]
transition on INT to state [14]

-------------------
lalr_state [39]: {
  [method_declaration ::= PUBLIC type identifier LPAREN formal_param_list RPAREN (*) LBRACE var_declaration_list statement_list return_stmt RBRACE , {RBRACE PUBLIC }]
}
transition on LBRACE to state [40]

-------------------
lalr_state [40]: {
  [var_declaration_list ::= (*) , {MINUS LPAREN LBRACE RBRACE BOOLEAN INT BYTE IF NOT WHILE NEW RETURN VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [method_declaration ::= PUBLIC type identifier LPAREN formal_param_list RPAREN LBRACE (*) var_declaration_list statement_list return_stmt RBRACE , {RBRACE PUBLIC }]
  [var_declaration_list ::= (*) var_declaration_list var_declaration , {MINUS LPAREN LBRACE RBRACE BOOLEAN INT BYTE IF NOT WHILE NEW RETURN VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on var_declaration_list to state [41]

-------------------
lalr_state [41]: {
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement_list ::= (*) , {RBRACE RETURN }]
  [statement ::= (*) MEGGYDELAY LPAREN exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [primitive_type ::= (*) INT , {ID }]
  [var_declaration ::= (*) type identifier SEMI , {MINUS LPAREN LBRACE RBRACE BOOLEAN INT BYTE IF NOT WHILE NEW RETURN VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) block_statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [primitive_type ::= (*) INT LBRACKET RBRACKET , {ID }]
  [type ::= (*) primitive_type , {ID }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET ASSIGN ID }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [block_statement ::= (*) LBRACE statement_list RBRACE , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [primitive_type ::= (*) VOID , {ID }]
  [var_declaration_list ::= var_declaration_list (*) var_declaration , {MINUS LPAREN LBRACE RBRACE BOOLEAN INT BYTE IF NOT WHILE NEW RETURN VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [method_declaration ::= PUBLIC type identifier LPAREN formal_param_list RPAREN LBRACE var_declaration_list (*) statement_list return_stmt RBRACE , {RBRACE PUBLIC }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) identifier ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [custom_type ::= (*) identifier , {ID }]
  [type ::= (*) custom_type , {ID }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) IF LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [primitive_type ::= (*) MEGGYCOLOR , {ID }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) identifier LBRACKET exp RBRACKET ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [primitive_type ::= (*) BOOLEAN , {ID }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) IF LPAREN exp RPAREN statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [primitive_type ::= (*) MEGGYBUTTON , {ID }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement_list ::= (*) statement statement_list , {RBRACE RETURN }]
  [statement ::= (*) MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [primitive_type ::= (*) BYTE , {ID }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) WHILE LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [primitive_type ::= (*) MEGGYTONE , {ID }]
}
transition on type to state [24]
transition on INT_LITERAL to state [65]
transition on statement_list to state [64]
transition on exp to state [63]
transition on MEGGYBUTTON to state [22]
transition on FALSE to state [62]
transition on var_declaration to state [25]
transition on MEGGYDELAY to state [61]
transition on MEGGYTONE to state [19]
transition on block_statement to state [60]
transition on WHILE to state [59]
transition on LBRACE to state [58]
transition on MEGGYCOLOR to state [23]
transition on MEGGYCHECKBUTTON to state [57]
transition on BYTE to state [26]
transition on primitive_type to state [21]
transition on MEGGYTONESTART to state [56]
transition on VOID to state [18]
transition on NEW to state [55]
transition on TRUE to state [54]
transition on statement to state [53]
transition on BOOLEAN to state [17]
transition on TONE_LITERAL to state [52]
transition on MEGGYGETPIXEL to state [51]
transition on ID to state [10]
transition on THIS to state [50]
transition on IF to state [49]
transition on BUTTON_LITERAL to state [48]
transition on MEGGYSETPIXEL to state [47]
transition on NOT to state [46]
transition on identifier to state [45]
transition on MINUS to state [44]
transition on INT to state [14]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on custom_type to state [16]

-------------------
lalr_state [42]: {
  [exp ::= COLOR_LITERAL (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}

-------------------
lalr_state [43]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= LPAREN (*) BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= LPAREN (*) exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
}
transition on BUTTON_LITERAL to state [48]
transition on BYTE to state [156]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [155]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [44]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= MINUS (*) exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [154]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [45]: {
  [statement ::= identifier (*) ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= identifier (*) , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [custom_type ::= identifier (*) , {ID }]
  [statement ::= identifier (*) LBRACKET exp RBRACKET ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on ASSIGN to state [111]
transition on LBRACKET to state [110]

-------------------
lalr_state [46]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= NOT (*) exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [153]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [47]: {
  [statement ::= MEGGYSETPIXEL (*) LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on LPAREN to state [145]

-------------------
lalr_state [48]: {
  [exp ::= BUTTON_LITERAL (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}

-------------------
lalr_state [49]: {
  [statement ::= IF (*) LPAREN exp RPAREN statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= IF (*) LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on LPAREN to state [139]

-------------------
lalr_state [50]: {
  [exp ::= THIS (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}

-------------------
lalr_state [51]: {
  [exp ::= MEGGYGETPIXEL (*) LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on LPAREN to state [134]

-------------------
lalr_state [52]: {
  [exp ::= TONE_LITERAL (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}

-------------------
lalr_state [53]: {
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement_list ::= (*) , {RBRACE RETURN }]
  [statement ::= (*) MEGGYDELAY LPAREN exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) block_statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET ASSIGN }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [block_statement ::= (*) LBRACE statement_list RBRACE , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) identifier ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) IF LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) identifier LBRACKET exp RBRACKET ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) IF LPAREN exp RPAREN statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement_list ::= statement (*) statement_list , {RBRACE RETURN }]
  [statement_list ::= (*) statement statement_list , {RBRACE RETURN }]
  [statement ::= (*) MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) WHILE LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on MEGGYGETPIXEL to state [51]
transition on MEGGYDELAY to state [61]
transition on NEW to state [55]
transition on block_statement to state [60]
transition on BUTTON_LITERAL to state [48]
transition on MINUS to state [44]
transition on FALSE to state [62]
transition on MEGGYCHECKBUTTON to state [57]
transition on COLOR_LITERAL to state [42]
transition on statement_list to state [133]
transition on MEGGYSETPIXEL to state [47]
transition on INT_LITERAL to state [65]
transition on THIS to state [50]
transition on ID to state [10]
transition on LBRACE to state [58]
transition on LPAREN to state [43]
transition on IF to state [49]
transition on TONE_LITERAL to state [52]
transition on TRUE to state [54]
transition on exp to state [63]
transition on NOT to state [46]
transition on WHILE to state [59]
transition on identifier to state [109]
transition on statement to state [53]
transition on MEGGYTONESTART to state [56]

-------------------
lalr_state [54]: {
  [exp ::= TRUE (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}

-------------------
lalr_state [55]: {
  [exp ::= NEW (*) identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [identifier ::= (*) ID , {LPAREN }]
}
transition on identifier to state [130]
transition on ID to state [10]

-------------------
lalr_state [56]: {
  [statement ::= MEGGYTONESTART (*) LPAREN exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on LPAREN to state [124]

-------------------
lalr_state [57]: {
  [exp ::= MEGGYCHECKBUTTON (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on LPAREN to state [121]

-------------------
lalr_state [58]: {
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement_list ::= (*) , {RBRACE }]
  [statement ::= (*) MEGGYDELAY LPAREN exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) block_statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET ASSIGN }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [block_statement ::= LBRACE (*) statement_list RBRACE , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [block_statement ::= (*) LBRACE statement_list RBRACE , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) identifier ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) IF LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) identifier LBRACKET exp RBRACKET ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) IF LPAREN exp RPAREN statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement_list ::= (*) statement statement_list , {RBRACE }]
  [statement ::= (*) MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) WHILE LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on MEGGYGETPIXEL to state [51]
transition on MEGGYDELAY to state [61]
transition on NEW to state [55]
transition on block_statement to state [60]
transition on BUTTON_LITERAL to state [48]
transition on MINUS to state [44]
transition on FALSE to state [62]
transition on MEGGYCHECKBUTTON to state [57]
transition on statement_list to state [119]
transition on COLOR_LITERAL to state [42]
transition on MEGGYSETPIXEL to state [47]
transition on INT_LITERAL to state [65]
transition on THIS to state [50]
transition on ID to state [10]
transition on LBRACE to state [58]
transition on LPAREN to state [43]
transition on IF to state [49]
transition on TONE_LITERAL to state [52]
transition on TRUE to state [54]
transition on exp to state [63]
transition on NOT to state [46]
transition on WHILE to state [59]
transition on identifier to state [109]
transition on statement to state [53]
transition on MEGGYTONESTART to state [56]

-------------------
lalr_state [59]: {
  [statement ::= WHILE (*) LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on LPAREN to state [105]

-------------------
lalr_state [60]: {
  [statement ::= block_statement (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [61]: {
  [statement ::= MEGGYDELAY (*) LPAREN exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on LPAREN to state [101]

-------------------
lalr_state [62]: {
  [exp ::= FALSE (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}

-------------------
lalr_state [63]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
}
transition on DOT to state [95]
transition on TIMES to state [77]
transition on LBRACKET to state [78]
transition on MINUS to state [71]
transition on EQUAL to state [74]
transition on PLUS to state [75]
transition on AND to state [72]
transition on LT to state [79]

-------------------
lalr_state [64]: {
  [method_declaration ::= PUBLIC type identifier LPAREN formal_param_list RPAREN LBRACE var_declaration_list statement_list (*) return_stmt RBRACE , {RBRACE PUBLIC }]
  [return_stmt ::= (*) , {RBRACE }]
  [return_stmt ::= (*) RETURN exp SEMI , {RBRACE }]
}
transition on return_stmt to state [67]
transition on RETURN to state [66]

-------------------
lalr_state [65]: {
  [exp ::= INT_LITERAL (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}

-------------------
lalr_state [66]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [return_stmt ::= RETURN (*) exp SEMI , {RBRACE }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [69]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [67]: {
  [method_declaration ::= PUBLIC type identifier LPAREN formal_param_list RPAREN LBRACE var_declaration_list statement_list return_stmt (*) RBRACE , {RBRACE PUBLIC }]
}
transition on RBRACE to state [68]

-------------------
lalr_state [68]: {
  [method_declaration ::= PUBLIC type identifier LPAREN formal_param_list RPAREN LBRACE var_declaration_list statement_list return_stmt RBRACE (*) , {RBRACE PUBLIC }]
}

-------------------
lalr_state [69]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [return_stmt ::= RETURN exp (*) SEMI , {RBRACE }]
}
transition on LT to state [79]
transition on LBRACKET to state [78]
transition on TIMES to state [77]
transition on DOT to state [76]
transition on PLUS to state [75]
transition on EQUAL to state [74]
transition on SEMI to state [73]
transition on AND to state [72]
transition on MINUS to state [71]

-------------------
lalr_state [70]: {
  [exp ::= identifier (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}

-------------------
lalr_state [71]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp MINUS (*) exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [94]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [72]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp AND (*) exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [93]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [73]: {
  [return_stmt ::= RETURN exp SEMI (*) , {RBRACE }]
}

-------------------
lalr_state [74]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp EQUAL (*) exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [92]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [75]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp PLUS (*) exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [91]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [76]: {
  [exp ::= exp DOT (*) identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [identifier ::= (*) ID , {LPAREN }]
}
transition on identifier to state [84]
transition on ID to state [10]

-------------------
lalr_state [77]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp TIMES (*) exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [83]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [78]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= exp LBRACKET (*) exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [81]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [79]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp LT (*) exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [80]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [80]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp LT exp (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on DOT to state [76]
transition on TIMES to state [77]
transition on LBRACKET to state [78]
transition on MINUS to state [71]
transition on EQUAL to state [74]
transition on PLUS to state [75]
transition on AND to state [72]
transition on LT to state [79]

-------------------
lalr_state [81]: {
  [exp ::= exp LBRACKET exp (*) RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
}
transition on LT to state [79]
transition on LBRACKET to state [78]
transition on TIMES to state [77]
transition on DOT to state [76]
transition on RBRACKET to state [82]
transition on PLUS to state [75]
transition on EQUAL to state [74]
transition on MINUS to state [71]
transition on AND to state [72]

-------------------
lalr_state [82]: {
  [exp ::= exp LBRACKET exp RBRACKET (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}

-------------------
lalr_state [83]: {
  [exp ::= exp TIMES exp (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on DOT to state [76]
transition on TIMES to state [77]
transition on LBRACKET to state [78]
transition on MINUS to state [71]
transition on EQUAL to state [74]
transition on PLUS to state [75]
transition on AND to state [72]
transition on LT to state [79]

-------------------
lalr_state [84]: {
  [exp ::= exp DOT identifier (*) LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on LPAREN to state [85]

-------------------
lalr_state [85]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp_args_list ::= (*) , {RPAREN COMMA }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp DOT identifier LPAREN (*) exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp_args_list ::= (*) exp_args_list COMMA exp , {RPAREN COMMA }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp_args_list ::= (*) exp , {RPAREN COMMA }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on exp_args_list to state [87]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [86]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [86]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp_args_list ::= exp (*) , {RPAREN COMMA }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
}
transition on DOT to state [76]
transition on TIMES to state [77]
transition on LBRACKET to state [78]
transition on MINUS to state [71]
transition on EQUAL to state [74]
transition on PLUS to state [75]
transition on AND to state [72]
transition on LT to state [79]

-------------------
lalr_state [87]: {
  [exp_args_list ::= exp_args_list (*) COMMA exp , {RPAREN COMMA }]
  [exp ::= exp DOT identifier LPAREN exp_args_list (*) RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on RPAREN to state [89]
transition on COMMA to state [88]

-------------------
lalr_state [88]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp_args_list ::= exp_args_list COMMA (*) exp , {RPAREN COMMA }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [90]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [89]: {
  [exp ::= exp DOT identifier LPAREN exp_args_list RPAREN (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}

-------------------
lalr_state [90]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp_args_list ::= exp_args_list COMMA exp (*) , {RPAREN COMMA }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
}
transition on DOT to state [76]
transition on TIMES to state [77]
transition on LBRACKET to state [78]
transition on MINUS to state [71]
transition on EQUAL to state [74]
transition on PLUS to state [75]
transition on AND to state [72]
transition on LT to state [79]

-------------------
lalr_state [91]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp PLUS exp (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on DOT to state [76]
transition on TIMES to state [77]
transition on LBRACKET to state [78]
transition on MINUS to state [71]
transition on EQUAL to state [74]
transition on PLUS to state [75]
transition on AND to state [72]
transition on LT to state [79]

-------------------
lalr_state [92]: {
  [exp ::= exp EQUAL exp (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on DOT to state [76]
transition on TIMES to state [77]
transition on LBRACKET to state [78]
transition on MINUS to state [71]
transition on EQUAL to state [74]
transition on PLUS to state [75]
transition on AND to state [72]
transition on LT to state [79]

-------------------
lalr_state [93]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp AND exp (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on DOT to state [76]
transition on TIMES to state [77]
transition on LBRACKET to state [78]
transition on MINUS to state [71]
transition on EQUAL to state [74]
transition on PLUS to state [75]
transition on AND to state [72]
transition on LT to state [79]

-------------------
lalr_state [94]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp MINUS exp (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on DOT to state [76]
transition on TIMES to state [77]
transition on LBRACKET to state [78]
transition on MINUS to state [71]
transition on EQUAL to state [74]
transition on PLUS to state [75]
transition on AND to state [72]
transition on LT to state [79]

-------------------
lalr_state [95]: {
  [exp ::= exp DOT (*) identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= exp DOT (*) identifier LPAREN exp_args_list RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [identifier ::= (*) ID , {LPAREN }]
}
transition on identifier to state [96]
transition on ID to state [10]

-------------------
lalr_state [96]: {
  [exp ::= exp DOT identifier (*) LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= exp DOT identifier (*) LPAREN exp_args_list RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on LPAREN to state [97]

-------------------
lalr_state [97]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp_args_list ::= (*) , {RPAREN COMMA }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [statement ::= exp DOT identifier LPAREN (*) exp_args_list RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp DOT identifier LPAREN (*) exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp_args_list ::= (*) exp_args_list COMMA exp , {RPAREN COMMA }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp_args_list ::= (*) exp , {RPAREN COMMA }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on exp_args_list to state [98]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on FALSE to state [62]
transition on identifier to state [70]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [86]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [98]: {
  [exp_args_list ::= exp_args_list (*) COMMA exp , {RPAREN COMMA }]
  [exp ::= exp DOT identifier LPAREN exp_args_list (*) RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= exp DOT identifier LPAREN exp_args_list (*) RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on RPAREN to state [99]
transition on COMMA to state [88]

-------------------
lalr_state [99]: {
  [exp ::= exp DOT identifier LPAREN exp_args_list RPAREN (*) , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= exp DOT identifier LPAREN exp_args_list RPAREN (*) SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on SEMI to state [100]

-------------------
lalr_state [100]: {
  [statement ::= exp DOT identifier LPAREN exp_args_list RPAREN SEMI (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [101]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [statement ::= MEGGYDELAY LPAREN (*) exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [102]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [102]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [statement ::= MEGGYDELAY LPAREN exp (*) RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
}
transition on LT to state [79]
transition on LBRACKET to state [78]
transition on TIMES to state [77]
transition on RPAREN to state [103]
transition on DOT to state [76]
transition on PLUS to state [75]
transition on EQUAL to state [74]
transition on MINUS to state [71]
transition on AND to state [72]

-------------------
lalr_state [103]: {
  [statement ::= MEGGYDELAY LPAREN exp RPAREN (*) SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on SEMI to state [104]

-------------------
lalr_state [104]: {
  [statement ::= MEGGYDELAY LPAREN exp RPAREN SEMI (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [105]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [statement ::= WHILE LPAREN (*) exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [106]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [106]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [statement ::= WHILE LPAREN exp (*) RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
}
transition on LT to state [79]
transition on LBRACKET to state [78]
transition on TIMES to state [77]
transition on RPAREN to state [107]
transition on DOT to state [76]
transition on PLUS to state [75]
transition on EQUAL to state [74]
transition on MINUS to state [71]
transition on AND to state [72]

-------------------
lalr_state [107]: {
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) MEGGYDELAY LPAREN exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) block_statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET ASSIGN }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [block_statement ::= (*) LBRACE statement_list RBRACE , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) identifier ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) IF LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) identifier LBRACKET exp RBRACKET ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) IF LPAREN exp RPAREN statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= WHILE LPAREN exp RPAREN (*) statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) WHILE LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on MEGGYGETPIXEL to state [51]
transition on MEGGYDELAY to state [61]
transition on NEW to state [55]
transition on block_statement to state [60]
transition on BUTTON_LITERAL to state [48]
transition on MINUS to state [44]
transition on FALSE to state [62]
transition on MEGGYCHECKBUTTON to state [57]
transition on COLOR_LITERAL to state [42]
transition on MEGGYSETPIXEL to state [47]
transition on INT_LITERAL to state [65]
transition on THIS to state [50]
transition on ID to state [10]
transition on LBRACE to state [58]
transition on LPAREN to state [43]
transition on IF to state [49]
transition on TONE_LITERAL to state [52]
transition on TRUE to state [54]
transition on exp to state [63]
transition on NOT to state [46]
transition on WHILE to state [59]
transition on identifier to state [109]
transition on statement to state [108]
transition on MEGGYTONESTART to state [56]

-------------------
lalr_state [108]: {
  [statement ::= WHILE LPAREN exp RPAREN statement (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [109]: {
  [statement ::= identifier (*) ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= identifier (*) , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= identifier (*) LBRACKET exp RBRACKET ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on ASSIGN to state [111]
transition on LBRACKET to state [110]

-------------------
lalr_state [110]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [statement ::= identifier LBRACKET (*) exp RBRACKET ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [114]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [111]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [statement ::= identifier ASSIGN (*) exp SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [112]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [112]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [statement ::= identifier ASSIGN exp (*) SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
}
transition on LT to state [79]
transition on LBRACKET to state [78]
transition on TIMES to state [77]
transition on DOT to state [76]
transition on PLUS to state [75]
transition on EQUAL to state [74]
transition on SEMI to state [113]
transition on MINUS to state [71]
transition on AND to state [72]

-------------------
lalr_state [113]: {
  [statement ::= identifier ASSIGN exp SEMI (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [114]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [statement ::= identifier LBRACKET exp (*) RBRACKET ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET RBRACKET }]
}
transition on LT to state [79]
transition on LBRACKET to state [78]
transition on TIMES to state [77]
transition on DOT to state [76]
transition on RBRACKET to state [115]
transition on PLUS to state [75]
transition on EQUAL to state [74]
transition on MINUS to state [71]
transition on AND to state [72]

-------------------
lalr_state [115]: {
  [statement ::= identifier LBRACKET exp RBRACKET (*) ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on ASSIGN to state [116]

-------------------
lalr_state [116]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [statement ::= identifier LBRACKET exp RBRACKET ASSIGN (*) exp SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [117]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [117]: {
  [statement ::= identifier LBRACKET exp RBRACKET ASSIGN exp (*) SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET SEMI }]
}
transition on LT to state [79]
transition on LBRACKET to state [78]
transition on TIMES to state [77]
transition on DOT to state [76]
transition on PLUS to state [75]
transition on EQUAL to state [74]
transition on SEMI to state [118]
transition on MINUS to state [71]
transition on AND to state [72]

-------------------
lalr_state [118]: {
  [statement ::= identifier LBRACKET exp RBRACKET ASSIGN exp SEMI (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [119]: {
  [block_statement ::= LBRACE statement_list (*) RBRACE , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on RBRACE to state [120]

-------------------
lalr_state [120]: {
  [block_statement ::= LBRACE statement_list RBRACE (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [121]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= MEGGYCHECKBUTTON LPAREN (*) exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [122]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [122]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= MEGGYCHECKBUTTON LPAREN exp (*) RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
}
transition on LT to state [79]
transition on LBRACKET to state [78]
transition on TIMES to state [77]
transition on RPAREN to state [123]
transition on DOT to state [76]
transition on PLUS to state [75]
transition on EQUAL to state [74]
transition on MINUS to state [71]
transition on AND to state [72]

-------------------
lalr_state [123]: {
  [exp ::= MEGGYCHECKBUTTON LPAREN exp RPAREN (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}

-------------------
lalr_state [124]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [statement ::= MEGGYTONESTART LPAREN (*) exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [125]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [125]: {
  [statement ::= MEGGYTONESTART LPAREN exp (*) COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
}
transition on LT to state [79]
transition on LBRACKET to state [78]
transition on TIMES to state [77]
transition on COMMA to state [126]
transition on DOT to state [76]
transition on PLUS to state [75]
transition on EQUAL to state [74]
transition on MINUS to state [71]
transition on AND to state [72]

-------------------
lalr_state [126]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [statement ::= MEGGYTONESTART LPAREN exp COMMA (*) exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [127]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [127]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [statement ::= MEGGYTONESTART LPAREN exp COMMA exp (*) RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on LT to state [79]
transition on LBRACKET to state [78]
transition on TIMES to state [77]
transition on RPAREN to state [128]
transition on DOT to state [76]
transition on PLUS to state [75]
transition on EQUAL to state [74]
transition on AND to state [72]
transition on MINUS to state [71]

-------------------
lalr_state [128]: {
  [statement ::= MEGGYTONESTART LPAREN exp COMMA exp RPAREN (*) SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on SEMI to state [129]

-------------------
lalr_state [129]: {
  [statement ::= MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [130]: {
  [exp ::= NEW identifier (*) LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on LPAREN to state [131]

-------------------
lalr_state [131]: {
  [exp ::= NEW identifier LPAREN (*) RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on RPAREN to state [132]

-------------------
lalr_state [132]: {
  [exp ::= NEW identifier LPAREN RPAREN (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}

-------------------
lalr_state [133]: {
  [statement_list ::= statement statement_list (*) , {RBRACE RETURN }]
}

-------------------
lalr_state [134]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= MEGGYGETPIXEL LPAREN (*) exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [135]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [135]: {
  [exp ::= MEGGYGETPIXEL LPAREN exp (*) COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
}
transition on LT to state [79]
transition on LBRACKET to state [78]
transition on TIMES to state [77]
transition on COMMA to state [136]
transition on DOT to state [76]
transition on PLUS to state [75]
transition on EQUAL to state [74]
transition on MINUS to state [71]
transition on AND to state [72]

-------------------
lalr_state [136]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= MEGGYGETPIXEL LPAREN exp COMMA (*) exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [137]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [137]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= MEGGYGETPIXEL LPAREN exp COMMA exp (*) RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on LT to state [79]
transition on LBRACKET to state [78]
transition on TIMES to state [77]
transition on RPAREN to state [138]
transition on DOT to state [76]
transition on PLUS to state [75]
transition on EQUAL to state [74]
transition on AND to state [72]
transition on MINUS to state [71]

-------------------
lalr_state [138]: {
  [exp ::= MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}

-------------------
lalr_state [139]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [statement ::= IF LPAREN (*) exp RPAREN statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [statement ::= IF LPAREN (*) exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [140]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [140]: {
  [statement ::= IF LPAREN exp (*) RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [statement ::= IF LPAREN exp (*) RPAREN statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
}
transition on LT to state [79]
transition on LBRACKET to state [78]
transition on TIMES to state [77]
transition on RPAREN to state [141]
transition on DOT to state [76]
transition on PLUS to state [75]
transition on EQUAL to state [74]
transition on MINUS to state [71]
transition on AND to state [72]

-------------------
lalr_state [141]: {
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) MEGGYDELAY LPAREN exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) block_statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET ASSIGN }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [block_statement ::= (*) LBRACE statement_list RBRACE , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) identifier ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= IF LPAREN exp RPAREN (*) statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) IF LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) identifier LBRACKET exp RBRACKET ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= IF LPAREN exp RPAREN (*) statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) IF LPAREN exp RPAREN statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) WHILE LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on MEGGYGETPIXEL to state [51]
transition on MEGGYDELAY to state [61]
transition on NEW to state [55]
transition on block_statement to state [60]
transition on BUTTON_LITERAL to state [48]
transition on MINUS to state [44]
transition on FALSE to state [62]
transition on MEGGYCHECKBUTTON to state [57]
transition on COLOR_LITERAL to state [42]
transition on MEGGYSETPIXEL to state [47]
transition on INT_LITERAL to state [65]
transition on THIS to state [50]
transition on ID to state [10]
transition on LBRACE to state [58]
transition on LPAREN to state [43]
transition on IF to state [49]
transition on TONE_LITERAL to state [52]
transition on TRUE to state [54]
transition on exp to state [63]
transition on NOT to state [46]
transition on WHILE to state [59]
transition on identifier to state [109]
transition on statement to state [142]
transition on MEGGYTONESTART to state [56]

-------------------
lalr_state [142]: {
  [statement ::= IF LPAREN exp RPAREN statement (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= IF LPAREN exp RPAREN statement (*) ELSE statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on ELSE to state [143]

-------------------
lalr_state [143]: {
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) MEGGYDELAY LPAREN exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) block_statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET ASSIGN }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [block_statement ::= (*) LBRACE statement_list RBRACE , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) identifier ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) IF LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) identifier LBRACKET exp RBRACKET ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= IF LPAREN exp RPAREN statement ELSE (*) statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) IF LPAREN exp RPAREN statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT LBRACKET }]
  [statement ::= (*) WHILE LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on MEGGYGETPIXEL to state [51]
transition on MEGGYDELAY to state [61]
transition on NEW to state [55]
transition on block_statement to state [60]
transition on BUTTON_LITERAL to state [48]
transition on MINUS to state [44]
transition on FALSE to state [62]
transition on MEGGYCHECKBUTTON to state [57]
transition on COLOR_LITERAL to state [42]
transition on MEGGYSETPIXEL to state [47]
transition on INT_LITERAL to state [65]
transition on THIS to state [50]
transition on ID to state [10]
transition on LBRACE to state [58]
transition on LPAREN to state [43]
transition on IF to state [49]
transition on TONE_LITERAL to state [52]
transition on TRUE to state [54]
transition on exp to state [63]
transition on NOT to state [46]
transition on WHILE to state [59]
transition on identifier to state [109]
transition on statement to state [144]
transition on MEGGYTONESTART to state [56]

-------------------
lalr_state [144]: {
  [statement ::= IF LPAREN exp RPAREN statement ELSE statement (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [145]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [statement ::= MEGGYSETPIXEL LPAREN (*) exp COMMA exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [146]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [146]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [statement ::= MEGGYSETPIXEL LPAREN exp (*) COMMA exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
}
transition on LT to state [79]
transition on LBRACKET to state [78]
transition on TIMES to state [77]
transition on COMMA to state [147]
transition on DOT to state [76]
transition on PLUS to state [75]
transition on EQUAL to state [74]
transition on MINUS to state [71]
transition on AND to state [72]

-------------------
lalr_state [147]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA (*) exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [148]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [148]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp (*) COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT LBRACKET }]
}
transition on LT to state [79]
transition on LBRACKET to state [78]
transition on TIMES to state [77]
transition on COMMA to state [149]
transition on DOT to state [76]
transition on PLUS to state [75]
transition on EQUAL to state [74]
transition on MINUS to state [71]
transition on AND to state [72]

-------------------
lalr_state [149]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA (*) exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [150]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [150]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp (*) RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
}
transition on LT to state [79]
transition on LBRACKET to state [78]
transition on TIMES to state [77]
transition on RPAREN to state [151]
transition on DOT to state [76]
transition on PLUS to state [75]
transition on EQUAL to state [74]
transition on MINUS to state [71]
transition on AND to state [72]

-------------------
lalr_state [151]: {
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN (*) SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on SEMI to state [152]

-------------------
lalr_state [152]: {
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [153]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= NOT exp (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on DOT to state [76]
transition on TIMES to state [77]
transition on LBRACKET to state [78]
transition on MINUS to state [71]
transition on EQUAL to state [74]
transition on PLUS to state [75]
transition on AND to state [72]
transition on LT to state [79]

-------------------
lalr_state [154]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= MINUS exp (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on DOT to state [76]
transition on TIMES to state [77]
transition on LBRACKET to state [78]
transition on MINUS to state [71]
transition on EQUAL to state [74]
transition on PLUS to state [75]
transition on AND to state [72]
transition on LT to state [79]

-------------------
lalr_state [155]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= LPAREN exp (*) RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT LBRACKET }]
}
transition on LT to state [79]
transition on LBRACKET to state [78]
transition on TIMES to state [77]
transition on RPAREN to state [159]
transition on DOT to state [76]
transition on PLUS to state [75]
transition on EQUAL to state [74]
transition on MINUS to state [71]
transition on AND to state [72]

-------------------
lalr_state [156]: {
  [exp ::= LPAREN BYTE (*) RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on RPAREN to state [157]

-------------------
lalr_state [157]: {
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) NEW identifier LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) identifier , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= LPAREN BYTE RPAREN (*) exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [identifier ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on BUTTON_LITERAL to state [48]
transition on LPAREN to state [43]
transition on COLOR_LITERAL to state [42]
transition on NOT to state [46]
transition on TONE_LITERAL to state [52]
transition on THIS to state [50]
transition on ID to state [10]
transition on identifier to state [70]
transition on FALSE to state [62]
transition on MEGGYGETPIXEL to state [51]
transition on INT_LITERAL to state [65]
transition on exp to state [158]
transition on TRUE to state [54]
transition on NEW to state [55]
transition on MEGGYCHECKBUTTON to state [57]
transition on MINUS to state [44]

-------------------
lalr_state [158]: {
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) LBRACKET exp RBRACKET , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= LPAREN BYTE RPAREN exp (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) DOT identifier LPAREN exp_args_list RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}
transition on DOT to state [76]
transition on TIMES to state [77]
transition on LBRACKET to state [78]
transition on MINUS to state [71]
transition on EQUAL to state [74]
transition on PLUS to state [75]
transition on AND to state [72]
transition on LT to state [79]

-------------------
lalr_state [159]: {
  [exp ::= LPAREN exp RPAREN (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT LBRACKET RBRACKET SEMI }]
}

-------------------
lalr_state [160]: {
  [formal_param_list ::= formal_param_list COMMA formal_param (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [161]: {
  [formal_param ::= type identifier (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [162]: {
  [primitive_type ::= INT LBRACKET (*) RBRACKET , {ID }]
}
transition on RBRACKET to state [163]

-------------------
lalr_state [163]: {
  [primitive_type ::= INT LBRACKET RBRACKET (*) , {ID }]
}

-------------------
lalr_state [164]: {
  [main_class ::= CLASS identifier (*) LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement NT$0 RBRACE , {EOF CLASS }]
}
transition on LBRACE to state [165]

-------------------
lalr_state [165]: {
  [main_class ::= CLASS identifier LBRACE (*) PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement NT$0 RBRACE , {EOF CLASS }]
}
transition on PUBLIC to state [166]

-------------------
lalr_state [166]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC (*) STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement NT$0 RBRACE , {EOF CLASS }]
}
transition on STATIC to state [167]

-------------------
lalr_state [167]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC (*) VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement NT$0 RBRACE , {EOF CLASS }]
}
transition on VOID to state [168]

-------------------
lalr_state [168]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID (*) MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement NT$0 RBRACE , {EOF CLASS }]
}
transition on MAIN to state [169]

-------------------
lalr_state [169]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN (*) LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement NT$0 RBRACE , {EOF CLASS }]
}
transition on LPAREN to state [170]

-------------------
lalr_state [170]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN (*) STRING LBRACKET RBRACKET identifier RPAREN block_statement NT$0 RBRACE , {EOF CLASS }]
}
transition on STRING to state [171]

-------------------
lalr_state [171]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING (*) LBRACKET RBRACKET identifier RPAREN block_statement NT$0 RBRACE , {EOF CLASS }]
}
transition on LBRACKET to state [172]

-------------------
lalr_state [172]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET (*) RBRACKET identifier RPAREN block_statement NT$0 RBRACE , {EOF CLASS }]
}
transition on RBRACKET to state [173]

-------------------
lalr_state [173]: {
  [identifier ::= (*) ID , {RPAREN }]
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET (*) identifier RPAREN block_statement NT$0 RBRACE , {EOF CLASS }]
}
transition on identifier to state [174]
transition on ID to state [10]

-------------------
lalr_state [174]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier (*) RPAREN block_statement NT$0 RBRACE , {EOF CLASS }]
}
transition on RPAREN to state [175]

-------------------
lalr_state [175]: {
  [block_statement ::= (*) LBRACE statement_list RBRACE , {RBRACE }]
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN (*) block_statement NT$0 RBRACE , {EOF CLASS }]
}
transition on LBRACE to state [58]
transition on block_statement to state [176]

-------------------
lalr_state [176]: {
  [NT$0 ::= (*) , {RBRACE }]
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement (*) NT$0 RBRACE , {EOF CLASS }]
}
transition on NT$0 to state [177]

-------------------
lalr_state [177]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement NT$0 (*) RBRACE , {EOF CLASS }]
}
transition on RBRACE to state [178]

-------------------
lalr_state [178]: {
  [main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement NT$0 RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [179]: {
  [$START ::= program EOF (*) , {EOF }]
}

-------------------
------- CUP v0.11a beta 20060608 Parser Generation Summary -------
  1 error and 8 warnings
  55 terminals, 21 non-terminals, and 70 productions declared, 
  producing 180 unique parse states.
  4 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  4 conflicts detected (0 expected).
  No code produced.
---------------------------------------------------- (v0.11a beta 20060608)
