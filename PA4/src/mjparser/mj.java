
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 05 20:23:59 EST 2018
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.lang.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;
import ast_visitors.*;
import ast.visitor.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 05 20:23:59 EST 2018
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\023\002\000\002\002" +
    "\010\000\002\024\002\000\002\007\022\000\002\012\004" +
    "\000\002\012\002\000\002\011\007\000\002\022\003\000" +
    "\002\016\005\000\002\016\003\000\002\016\002\000\002" +
    "\015\004\000\002\013\014\000\002\014\004\000\002\014" +
    "\002\000\002\017\005\000\002\017\002\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\004\013\000\002\004\013\000\002\004\007\000\002\004" +
    "\011\000\002\004\007\000\002\004\011\000\002\004\007" +
    "\000\002\004\003\000\002\005\004\000\002\005\002\000" +
    "\002\006\005\000\002\020\005\000\002\020\003\000\002" +
    "\020\002\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\004" +
    "\000\002\003\010\000\002\003\010\000\002\003\006\000" +
    "\002\003\006\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\005\000\002\003\003" +
    "\000\002\003\003\000\002\003\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\004\017\005\001\002\000\004\002\235\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\010\001\002\000\004\061\216\001\002\000" +
    "\006\002\000\037\000\001\002\000\006\002\ufffb\037\ufffb" +
    "\001\002\000\006\002\uffff\037\014\001\002\000\004\061" +
    "\016\001\002\000\006\002\ufffc\037\ufffc\001\002\000\004" +
    "\011\017\001\002\000\006\012\ufff2\032\ufff2\001\002\000" +
    "\006\012\021\032\022\001\002\000\006\002\ufffa\037\ufffa" +
    "\001\002\000\020\013\031\014\033\015\030\036\032\047" +
    "\026\050\027\051\024\001\002\000\006\012\ufff3\032\ufff3" +
    "\001\002\000\004\061\uffe9\001\002\000\004\061\034\001" +
    "\002\000\004\061\uffeb\001\002\000\004\061\uffea\001\002" +
    "\000\004\061\uffee\001\002\000\004\061\uffef\001\002\000" +
    "\004\061\uffec\001\002\000\004\061\uffed\001\002\000\004" +
    "\007\035\001\002\000\024\010\ufff6\013\031\014\033\015" +
    "\030\027\ufff6\036\032\047\026\050\027\051\024\001\002" +
    "\000\004\061\214\001\002\000\006\010\ufff7\027\ufff7\001" +
    "\002\000\006\010\042\027\041\001\002\000\020\013\031" +
    "\014\033\015\030\036\032\047\026\050\027\051\024\001" +
    "\002\000\004\011\043\001\002\000\056\005\uffdf\007\uffdf" +
    "\011\uffdf\012\uffdf\020\uffdf\025\uffdf\026\uffdf\031\uffdf\033" +
    "\uffdf\052\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf" +
    "\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067" +
    "\uffdf\001\002\000\056\005\070\007\056\011\057\012\ufff0" +
    "\020\055\025\050\026\047\031\073\033\051\052\063\054" +
    "\045\055\074\056\075\057\066\060\062\061\060\062\053" +
    "\063\067\064\064\065\071\066\054\067\061\001\002\000" +
    "\004\007\203\001\002\000\056\005\uffe0\007\uffe0\011\uffe0" +
    "\012\uffe0\020\uffe0\025\uffe0\026\uffe0\031\uffe0\033\uffe0\052" +
    "\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\001" +
    "\002\000\004\007\177\001\002\000\036\005\070\007\056" +
    "\025\050\031\073\056\075\057\066\060\062\061\060\062" +
    "\053\063\067\064\064\065\071\066\054\067\061\001\002" +
    "\000\036\005\070\007\056\025\050\031\073\056\075\057" +
    "\066\060\062\061\060\062\053\063\067\064\064\065\071" +
    "\066\054\067\061\001\002\000\016\004\102\005\104\006" +
    "\105\023\103\024\101\030\166\001\002\000\022\004\uffcc" +
    "\005\uffcc\006\uffcc\010\uffcc\023\uffcc\024\uffcc\027\uffcc\030" +
    "\uffcc\001\002\000\022\004\uffcd\005\uffcd\006\uffcd\010\uffcd" +
    "\023\uffcd\024\uffcd\027\uffcd\030\uffcd\001\002\000\004\007" +
    "\160\001\002\000\040\005\070\007\056\015\154\025\050" +
    "\031\073\056\075\057\066\060\062\061\060\062\053\063" +
    "\067\064\064\065\071\066\054\067\061\001\002\000\054" +
    "\005\uffdf\007\uffdf\011\uffdf\012\uffdf\020\uffdf\025\uffdf\026" +
    "\uffdf\031\uffdf\052\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf" +
    "\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066" +
    "\uffdf\067\uffdf\001\002\000\022\004\uffc8\005\uffc8\006\uffc8" +
    "\010\uffc8\023\uffc8\024\uffc8\027\uffc8\030\uffc8\001\002\000" +
    "\022\004\uffc7\005\uffc7\006\uffc7\010\uffc7\023\uffc7\024\uffc7" +
    "\027\uffc7\030\uffc7\001\002\000\022\004\uffd0\005\uffd0\006" +
    "\uffd0\010\uffd0\023\uffd0\024\uffd0\027\uffd0\030\uffd0\001\002" +
    "\000\004\007\141\001\002\000\022\004\uffcf\005\uffcf\006" +
    "\uffcf\010\uffcf\023\uffcf\024\uffcf\027\uffcf\030\uffcf\001\002" +
    "\000\004\012\140\001\002\000\004\007\135\001\002\000" +
    "\022\004\uffcb\005\uffcb\006\uffcb\010\uffcb\023\uffcb\024\uffcb" +
    "\027\uffcb\030\uffcb\001\002\000\036\005\070\007\056\025" +
    "\050\031\073\056\075\057\066\060\062\061\060\062\053" +
    "\063\067\064\064\065\071\066\054\067\061\001\002\000" +
    "\022\004\uffce\005\uffce\006\uffce\010\uffce\023\uffce\024\uffce" +
    "\027\uffce\030\uffce\001\002\000\060\005\uffe1\007\uffe1\011" +
    "\uffe1\012\uffe1\020\uffe1\021\uffe1\025\uffe1\026\uffe1\031\uffe1" +
    "\033\uffe1\052\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060" +
    "\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1" +
    "\067\uffe1\001\002\000\004\061\131\001\002\000\004\007" +
    "\125\001\002\000\004\007\076\001\002\000\036\005\070" +
    "\007\056\025\050\031\073\056\075\057\066\060\062\061" +
    "\060\062\053\063\067\064\064\065\071\066\054\067\061" +
    "\001\002\000\020\004\102\005\104\006\105\023\103\024" +
    "\101\027\100\030\106\001\002\000\036\005\070\007\056" +
    "\025\050\031\073\056\075\057\066\060\062\061\060\062" +
    "\053\063\067\064\064\065\071\066\054\067\061\001\002" +
    "\000\036\005\070\007\056\025\050\031\073\056\075\057" +
    "\066\060\062\061\060\062\053\063\067\064\064\065\071" +
    "\066\054\067\061\001\002\000\036\005\070\007\056\025" +
    "\050\031\073\056\075\057\066\060\062\061\060\062\053" +
    "\063\067\064\064\065\071\066\054\067\061\001\002\000" +
    "\036\005\070\007\056\025\050\031\073\056\075\057\066" +
    "\060\062\061\060\062\053\063\067\064\064\065\071\066" +
    "\054\067\061\001\002\000\036\005\070\007\056\025\050" +
    "\031\073\056\075\057\066\060\062\061\060\062\053\063" +
    "\067\064\064\065\071\066\054\067\061\001\002\000\036" +
    "\005\070\007\056\025\050\031\073\056\075\057\066\060" +
    "\062\061\060\062\053\063\067\064\064\065\071\066\054" +
    "\067\061\001\002\000\004\061\107\001\002\000\004\007" +
    "\110\001\002\000\042\005\070\007\056\010\uffdb\025\050" +
    "\027\uffdb\031\073\056\075\057\066\060\062\061\060\062" +
    "\053\063\067\064\064\065\071\066\054\067\061\001\002" +
    "\000\022\004\102\005\104\006\105\010\uffdc\023\103\024" +
    "\101\027\uffdc\030\106\001\002\000\006\010\114\027\113" +
    "\001\002\000\036\005\070\007\056\025\050\031\073\056" +
    "\075\057\066\060\062\061\060\062\053\063\067\064\064" +
    "\065\071\066\054\067\061\001\002\000\022\004\uffd4\005" +
    "\uffd4\006\uffd4\010\uffd4\023\uffd4\024\uffd4\027\uffd4\030\uffd4" +
    "\001\002\000\022\004\102\005\104\006\105\010\uffdd\023" +
    "\103\024\101\027\uffdd\030\106\001\002\000\022\004\uffd6" +
    "\005\uffd6\006\uffd6\010\uffd6\023\uffd6\024\uffd6\027\uffd6\030" +
    "\106\001\002\000\022\004\uffd7\005\uffd7\006\105\010\uffd7" +
    "\023\uffd7\024\uffd7\027\uffd7\030\106\001\002\000\022\004" +
    "\102\005\104\006\105\010\uffd9\023\uffd9\024\uffd9\027\uffd9" +
    "\030\106\001\002\000\022\004\uffd8\005\uffd8\006\105\010" +
    "\uffd8\023\uffd8\024\uffd8\027\uffd8\030\106\001\002\000\022" +
    "\004\102\005\104\006\105\010\uffda\023\103\024\uffda\027" +
    "\uffda\030\106\001\002\000\020\004\102\005\104\006\105" +
    "\010\124\023\103\024\101\030\106\001\002\000\022\004" +
    "\uffd3\005\uffd3\006\uffd3\010\uffd3\023\uffd3\024\uffd3\027\uffd3" +
    "\030\uffd3\001\002\000\036\005\070\007\056\025\050\031" +
    "\073\056\075\057\066\060\062\061\060\062\053\063\067" +
    "\064\064\065\071\066\054\067\061\001\002\000\020\004" +
    "\102\005\104\006\105\010\127\023\103\024\101\030\106" +
    "\001\002\000\004\044\130\001\002\000\060\005\uffe6\007" +
    "\uffe6\011\uffe6\012\uffe6\020\uffe6\021\uffe6\025\uffe6\026\uffe6" +
    "\031\uffe6\033\uffe6\052\uffe6\054\uffe6\055\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6" +
    "\066\uffe6\067\uffe6\001\002\000\004\007\132\001\002\000" +
    "\004\010\133\001\002\000\022\004\uffc6\005\uffc6\006\uffc6" +
    "\010\uffc6\023\uffc6\024\uffc6\027\uffc6\030\uffc6\001\002\000" +
    "\022\004\uffd5\005\uffd5\006\105\010\uffd5\023\uffd5\024\uffd5" +
    "\027\uffd5\030\106\001\002\000\036\005\070\007\056\025" +
    "\050\031\073\056\075\057\066\060\062\061\060\062\053" +
    "\063\067\064\064\065\071\066\054\067\061\001\002\000" +
    "\020\004\102\005\104\006\105\010\137\023\103\024\101" +
    "\030\106\001\002\000\022\004\uffd2\005\uffd2\006\uffd2\010" +
    "\uffd2\023\uffd2\024\uffd2\027\uffd2\030\uffd2\001\002\000\006" +
    "\012\ufff4\032\ufff4\001\002\000\036\005\070\007\056\025" +
    "\050\031\073\056\075\057\066\060\062\061\060\062\053" +
    "\063\067\064\064\065\071\066\054\067\061\001\002\000" +
    "\020\004\102\005\104\006\105\023\103\024\101\027\143" +
    "\030\106\001\002\000\036\005\070\007\056\025\050\031" +
    "\073\056\075\057\066\060\062\061\060\062\053\063\067" +
    "\064\064\065\071\066\054\067\061\001\002\000\020\004" +
    "\102\005\104\006\105\023\103\024\101\027\145\030\106" +
    "\001\002\000\036\005\070\007\056\025\050\031\073\056" +
    "\075\057\066\060\062\061\060\062\053\063\067\064\064" +
    "\065\071\066\054\067\061\001\002\000\020\004\102\005" +
    "\104\006\105\010\147\023\103\024\101\030\106\001\002" +
    "\000\004\044\150\001\002\000\060\005\uffe8\007\uffe8\011" +
    "\uffe8\012\uffe8\020\uffe8\021\uffe8\025\uffe8\026\uffe8\031\uffe8" +
    "\033\uffe8\052\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060" +
    "\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8" +
    "\067\uffe8\001\002\000\054\005\070\007\056\011\057\012" +
    "\152\020\055\025\050\026\047\031\073\052\063\054\045" +
    "\055\074\056\075\057\066\060\062\061\060\062\053\063" +
    "\067\064\064\065\071\066\054\067\061\001\002\000\060" +
    "\005\uffde\007\uffde\011\uffde\012\uffde\020\uffde\021\uffde\025" +
    "\uffde\026\uffde\031\uffde\033\uffde\052\uffde\054\uffde\055\uffde" +
    "\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064" +
    "\uffde\065\uffde\066\uffde\067\uffde\001\002\000\020\004\102" +
    "\005\104\006\105\010\157\023\103\024\101\030\106\001" +
    "\002\000\004\010\155\001\002\000\036\005\070\007\056" +
    "\025\050\031\073\056\075\057\066\060\062\061\060\062" +
    "\053\063\067\064\064\065\071\066\054\067\061\001\002" +
    "\000\022\004\uffd1\005\uffd1\006\uffd1\010\uffd1\023\uffd1\024" +
    "\uffd1\027\uffd1\030\uffd1\001\002\000\022\004\uffc9\005\uffc9" +
    "\006\uffc9\010\uffc9\023\uffc9\024\uffc9\027\uffc9\030\uffc9\001" +
    "\002\000\036\005\070\007\056\025\050\031\073\056\075" +
    "\057\066\060\062\061\060\062\053\063\067\064\064\065" +
    "\071\066\054\067\061\001\002\000\020\004\102\005\104" +
    "\006\105\010\162\023\103\024\101\030\106\001\002\000" +
    "\052\005\070\007\056\011\057\020\055\025\050\026\047" +
    "\031\073\052\063\054\045\055\074\056\075\057\066\060" +
    "\062\061\060\062\053\063\067\064\064\065\071\066\054" +
    "\067\061\001\002\000\060\005\uffe4\007\uffe4\011\uffe4\012" +
    "\uffe4\020\uffe4\021\164\025\uffe4\026\uffe4\031\uffe4\033\uffe4" +
    "\052\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061" +
    "\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4" +
    "\001\002\000\052\005\070\007\056\011\057\020\055\025" +
    "\050\026\047\031\073\052\063\054\045\055\074\056\075" +
    "\057\066\060\062\061\060\062\053\063\067\064\064\065" +
    "\071\066\054\067\061\001\002\000\060\005\uffe3\007\uffe3" +
    "\011\uffe3\012\uffe3\020\uffe3\021\uffe3\025\uffe3\026\uffe3\031" +
    "\uffe3\033\uffe3\052\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3" +
    "\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066" +
    "\uffe3\067\uffe3\001\002\000\004\061\167\001\002\000\004" +
    "\007\170\001\002\000\042\005\070\007\056\010\uffdb\025" +
    "\050\027\uffdb\031\073\056\075\057\066\060\062\061\060" +
    "\062\053\063\067\064\064\065\071\066\054\067\061\001" +
    "\002\000\006\010\172\027\113\001\002\000\020\004\uffd4" +
    "\005\uffd4\006\uffd4\023\uffd4\024\uffd4\030\uffd4\044\173\001" +
    "\002\000\060\005\uffe5\007\uffe5\011\uffe5\012\uffe5\020\uffe5" +
    "\021\uffe5\025\uffe5\026\uffe5\031\uffe5\033\uffe5\052\uffe5\054" +
    "\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5" +
    "\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\001\002\000" +
    "\020\004\102\005\104\006\105\023\103\024\101\027\175" +
    "\030\106\001\002\000\004\012\ufff1\001\002\000\022\004" +
    "\uffca\005\uffca\006\uffca\010\uffca\023\uffca\024\uffca\027\uffca" +
    "\030\106\001\002\000\036\005\070\007\056\025\050\031" +
    "\073\056\075\057\066\060\062\061\060\062\053\063\067" +
    "\064\064\065\071\066\054\067\061\001\002\000\020\004" +
    "\102\005\104\006\105\010\201\023\103\024\101\030\106" +
    "\001\002\000\052\005\070\007\056\011\057\020\055\025" +
    "\050\026\047\031\073\052\063\054\045\055\074\056\075" +
    "\057\066\060\062\061\060\062\053\063\067\064\064\065" +
    "\071\066\054\067\061\001\002\000\060\005\uffe2\007\uffe2" +
    "\011\uffe2\012\uffe2\020\uffe2\021\uffe2\025\uffe2\026\uffe2\031" +
    "\uffe2\033\uffe2\052\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2" +
    "\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066" +
    "\uffe2\067\uffe2\001\002\000\036\005\070\007\056\025\050" +
    "\031\073\056\075\057\066\060\062\061\060\062\053\063" +
    "\067\064\064\065\071\066\054\067\061\001\002\000\020" +
    "\004\102\005\104\006\105\023\103\024\101\027\205\030" +
    "\106\001\002\000\036\005\070\007\056\025\050\031\073" +
    "\056\075\057\066\060\062\061\060\062\053\063\067\064" +
    "\064\065\071\066\054\067\061\001\002\000\020\004\102" +
    "\005\104\006\105\023\103\024\101\027\207\030\106\001" +
    "\002\000\036\005\070\007\056\025\050\031\073\056\075" +
    "\057\066\060\062\061\060\062\053\063\067\064\064\065" +
    "\071\066\054\067\061\001\002\000\020\004\102\005\104" +
    "\006\105\010\211\023\103\024\101\030\106\001\002\000" +
    "\004\044\212\001\002\000\060\005\uffe7\007\uffe7\011\uffe7" +
    "\012\uffe7\020\uffe7\021\uffe7\025\uffe7\026\uffe7\031\uffe7\033" +
    "\uffe7\052\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067" +
    "\uffe7\001\002\000\006\010\ufff8\027\ufff8\001\002\000\006" +
    "\010\ufff9\027\ufff9\001\002\000\006\010\ufff5\027\ufff5\001" +
    "\002\000\004\011\217\001\002\000\004\032\220\001\002" +
    "\000\004\034\221\001\002\000\004\036\222\001\002\000" +
    "\004\016\223\001\002\000\004\007\224\001\002\000\004" +
    "\035\225\001\002\000\004\041\226\001\002\000\004\042" +
    "\227\001\002\000\004\061\230\001\002\000\004\010\231" +
    "\001\002\000\004\011\057\001\002\000\004\012\ufffe\001" +
    "\002\000\004\012\234\001\002\000\006\002\ufffd\037\ufffd" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\010\001\001" +
    "\000\002\001\001\000\004\023\011\001\001\000\004\012" +
    "\012\001\001\000\004\011\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\017\001" +
    "\001\000\004\013\022\001\001\000\002\001\001\000\004" +
    "\010\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\035\015\036\016\037" +
    "\001\001\000\004\022\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\035\015\212\001\001\000\002" +
    "\001\001\000\004\005\043\001\001\000\012\003\051\004" +
    "\045\006\071\017\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\175\001\001\000" +
    "\004\003\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\152\001" +
    "\001\000\004\005\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\076\001\001\000\002\001\001\000\004\003" +
    "\122\001\001\000\004\003\121\001\001\000\004\003\120" +
    "\001\001\000\004\003\117\001\001\000\004\003\116\001" +
    "\001\000\004\003\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\110\020\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\141\001" +
    "\001\000\002\001\001\000\004\003\143\001\001\000\002" +
    "\001\001\000\004\003\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\051\004\045" +
    "\006\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\160\001\001\000\002\001" +
    "\001\000\010\003\051\004\162\006\071\001\001\000\002" +
    "\001\001\000\010\003\051\004\164\006\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\110\020\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\177\001\001\000\002\001" +
    "\001\000\010\003\051\004\201\006\071\001\001\000\002" +
    "\001\001\000\004\003\203\001\001\000\002\001\001\000" +
    "\004\003\205\001\001\000\002\001\001\000\004\003\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\231\001\001\000\004" +
    "\024\232\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= NEW ID LPAREN RPAREN 
            {
              IExp RESULT =null;
		
        // TODO
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= THIS 
            {
              IExp RESULT =null;
		
        // TODO
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= ID 
            {
              IExp RESULT =null;
		
        // TODO
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = e;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= NOT exp 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new NotExp(n.line, n.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= FALSE 
            {
              IExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue f = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new FalseLiteral(f.line, f.pos, f.lexeme, f.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= TRUE 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new TrueLiteral(t.line, t.pos, t.lexeme, t.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= TONE_LITERAL 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        // TODO
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= BUTTON_LITERAL 
            {
              IExp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ButtonLiteral(b.line, b.pos, b.lexeme, b.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ColorLiteral(c.line, c.pos, c.lexeme, c.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new IntLiteral(n.line, n.pos, n.lexeme, n.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= LPAREN BYTE RPAREN exp 
            {
              IExp RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue lp = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ByteCast(lp.line, lp.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= MEGGYCHECKBUTTON LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new MeggyCheckButton(m.line, m.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new MeggyGetPixel(m.line, m.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp DOT ID LPAREN exp_args_list RPAREN 
            {
              IExp RESULT =null;
		
        // TODO
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= MINUS exp 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new NegExp(m.line, m.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp TIMES exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new MulExp(op.line, op.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp MINUS exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new MinusExp(op.line, op.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp PLUS exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new PlusExp(op.line, op.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp EQUAL exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue eq = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new EqualExp(eq.line, eq.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp AND exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new AndExp(op.line, op.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp_args_list ::= 
            {
              LinkedList<IExp> RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp_args_list",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp_args_list ::= exp 
            {
              LinkedList<IExp> RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp_args_list",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp_args_list ::= exp_args_list COMMA exp 
            {
              LinkedList<IExp> RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp_args_list",14, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // block_statement ::= LBRACE statement_list RBRACE 
            {
              BlockStatement RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue lb = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IStatement> list = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new BlockStatement(lb.line, lb.pos, list);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("block_statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement_list ::= 
            {
              LinkedList<IStatement> RESULT =null;
		
        RESULT = new LinkedList<IStatement>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement_list ::= statement_list statement 
            {
              LinkedList<IStatement> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IStatement> list = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  if (s != null) {
            list.add(s);
        } 
        RESULT = list; 
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= block_statement 
            {
              IStatement RESULT =null;
		int blkleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		BlockStatement blk = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = blk;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= WHILE LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue w = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new WhileStatement(w.line, w.pos, e, s);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= IF LPAREN exp RPAREN statement ELSE statement 
            {
              IStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement s1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new IfStatement(i.line, i.pos, e, s1, s2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= IF LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new IfStatement(i.line, i.pos, e, s, null);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= exp DOT ID LPAREN exp_args_list RPAREN SEMI 
            {
              IStatement RESULT =null;
		
        // TODO
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= MEGGYDELAY LPAREN exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue md = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        RESULT = new MeggyDelay(md.line, md.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= MEGGYTONESTART LPAREN exp COMMA exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue mt = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		
        // TODO
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mspleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int mspright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue msp = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e3 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        RESULT = new MeggySetPixel(msp.line, msp.pos, e1, e2, e3);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= MEGGYTONE 
            {
              IType RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ToneType(m.line, m.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= MEGGYBUTTON 
            {
              IType RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ButtonType(m.line, m.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= MEGGYCOLOR 
            {
              IType RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ColorType(m.line, m.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= VOID 
            {
              IType RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new VoidType(v.line, v.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= INT 
            {
              IType RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new IntType(i.line, i.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= BYTE 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ByteType(b.line, b.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= BOOLEAN 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new BoolType(b.line, b.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // return_stmt ::= 
            {
              Object RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("return_stmt",13, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // return_stmt ::= RETURN exp COMMA 
            {
              Object RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("return_stmt",13, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method_declaration_list ::= 
            {
              LinkedList<MethodDecl> RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_declaration_list",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_declaration_list ::= method_declaration_list method_declaration 
            {
              LinkedList<MethodDecl> RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_declaration_list",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method_declaration ::= PUBLIC type ID LPAREN param_list RPAREN LBRACE statement_list return_stmt RBRACE 
            {
              MethodDecl RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_declaration",9, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formal_param ::= type identifier 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		ILiteral id = (ILiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new Formal(t.getLine(), t.getPos(), t, id.getLexeme());
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_param",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // param_list ::= 
            {
              LinkedList<Formal> RESULT =null;
		
        RESULT = new LinkedList<Formal>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("param_list",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // param_list ::= formal_param 
            {
              LinkedList<Formal> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Formal param = (Formal)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        LinkedList<Formal> list = new LinkedList<Formal>();
        list.add(param);
        RESULT = list;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("param_list",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // param_list ::= param_list COMMA formal_param 
            {
              LinkedList<Formal> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<Formal> list = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Formal param = (Formal)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        if (param != null) {
            list.add(param);
        }
        RESULT = list;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("param_list",12, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // identifier ::= ID 
            {
              ILiteral RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new IdLiteral(i.line, i.pos, i.lexeme);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("identifier",16, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_declaration ::= CLASS ID LBRACE method_declaration_list RBRACE 
            {
              TopClassDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> methods = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        // RESULT = new TopClassDecl(id.line, id.pos, id, new LinkedList<VarDecl>(), methods);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_declaration",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_declaration_list ::= 
            {
              LinkedList<TopClassDecl> RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_declaration_list",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_declaration_list ::= class_declaration_list class_declaration 
            {
              LinkedList<TopClassDecl> RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_declaration_list",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN block_statement NT$1 RBRACE 
            {
              MainClass RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-14)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int blkleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		BlockStatement blk = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-15)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              MainClass RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-12)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int blkleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		BlockStatement blk = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;

            RESULT = new MainClass(m.line, m.pos, c.lexeme, param.lexeme, blk);
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$1",18, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= IMPORT MEGGY SEMI main_class NT$0 class_declaration_list 
            {
              Program RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Program) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
 RESULT = new Program(i.line, i.pos, m, new LinkedList<IClassDecl>()); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$0",17, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

