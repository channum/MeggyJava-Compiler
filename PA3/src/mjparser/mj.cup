package mjparser;
import java_cup.runtime.*;
import java.util.*;
import java.lang.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;
import ast_visitors.*;
import ast.visitor.*;


parser code {:

    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            
:}

/* Notice: all terminals declared here */
terminal SymbolValue PLUS, MINUS, TIMES, LPAREN, RPAREN;
terminal SymbolValue LBRACE, RBRACE;
terminal SymbolValue BOOLEAN, INT;
terminal SymbolValue BYTE;
terminal SymbolValue MAIN, IMPORT;
terminal SymbolValue IF, ELSE;
terminal SymbolValue LT;
terminal SymbolValue EQUAL;
terminal SymbolValue AND, NOT;
terminal SymbolValue WHILE;
terminal SymbolValue COMMA, DOT;
terminal SymbolValue NEW, PUBLIC, RETURN, STATIC;
terminal SymbolValue STRING, VOID;
terminal SymbolValue CLASS, EXTENDS;
terminal SymbolValue LBRACKET, RBRACKET;
terminal SymbolValue LENGTH;
terminal SymbolValue SEMI;
terminal SymbolValue ASSIGN;

terminal SymbolValue MEGGY;
terminal SymbolValue MEGGYCOLOR;
terminal SymbolValue MEGGYBUTTON;
terminal SymbolValue MEGGYTONE;
terminal SymbolValue MEGGYSETPIXEL;
terminal SymbolValue MEGGYSETAUXLEDS;
terminal SymbolValue MEGGYTONESTART;
terminal SymbolValue MEGGYDELAY;
terminal SymbolValue MEGGYGETPIXEL;
terminal SymbolValue MEGGYCHECKBUTTON;
// terminal SymbolValue EOF;

terminal SymbolValue INT_LITERAL, ID;
terminal SymbolValue TRUE, FALSE;
terminal SymbolValue COLOR_LITERAL, BUTTON_LITERAL, TONE_LITERAL;
terminal SymbolValue THIS;

/* bogus terminal for unary precedence declaration */
terminal UMINUS;

non terminal Program program;
non terminal IExp exp;
non terminal IStatement statement;
non terminal LinkedList<IStatement> statement_list;
non terminal BlockStatement block_statement;
non terminal MainClass main_class;

/* Declare precedence and associativity  here */
precedence left TIMES;
precedence right UMINUS;


/* Meggy Java Grammar */
start with program;

program ::= 
    IMPORT MEGGY SEMI main_class
    ;
    
main_class ::=
        CLASS ID:name         
            {: java.io.PrintStream sout 
                    = new java.io.PrintStream(
                        new java.io.FileOutputStream(name.lexeme+".java.s"));
                parser.out = new PrintWriter(sout);
                // Check filename is class name, if not exit with error message
                // System.exit(0);   
            :}
        LBRACE PUBLIC STATIC VOID MAIN:m 
        LPAREN STRING LBRACKET RBRACKET ID:param RPAREN
          {: 
            InputStream mainPrologue=null;
            BufferedReader reader=null;
            try {
                // The syntax for loading a text resource file 
                // from a jar file here:
                // http://www.rgagnon.com/javadetails/java-0077.html
                System.out.println("Generate prolog using avrH.rtl.s");
                mainPrologue 
                    = this.getClass().getClassLoader().getResourceAsStream(
                        "avrH.rtl.s");
                reader = new BufferedReader(new 
                    InputStreamReader(mainPrologue));
                String line = null;
                while ((line = reader.readLine()) != null) {
                    parser.out.println(line);
                }
                parser.out.println("\n");
            } catch ( Exception e2) {
                e2.printStackTrace();
            }
            finally{
                try{
                    if(mainPrologue!=null) mainPrologue.close();
                    if(reader!=null) reader.close();
                }
                catch (IOException e) {
                   e.printStackTrace();
                }
            }
          :}
        block_statement:blk
          {:
            RESULT = new MainClass(m.line, m.pos, m.lexeme, param.lexeme, blk);
          :}
        RBRACE
          {:
            InputStream mainPrologue=null;
            BufferedReader reader=null;
            try {
                System.out.println("Generate epilog using avrF.rtl.s");
                mainPrologue 
                    = this.getClass().getClassLoader().getResourceAsStream(
                        "avrF.rtl.s");
                reader = new BufferedReader(new 
                    InputStreamReader(mainPrologue));
                String line = null;
                while ((line = reader.readLine()) != null) {
                    parser.out.println(line);
                }
            } catch ( Exception e2) {
                e2.printStackTrace();
            }
            finally{
                try{
                    if(mainPrologue!=null) mainPrologue.close();
                    if(reader!=null) reader.close();
                }
                catch (IOException e) {
                    e.printStackTrace();
                }
            }
            parser.out.flush();
          :}
    ;

statement ::= 
    MEGGYSETPIXEL:msp LPAREN exp:e1 COMMA exp:e2 COMMA exp:e3 RPAREN SEMI
    {:
        RESULT = new MeggySetPixel(msp.line, msp.pos, e1, e2, e3);
    :}
    ;

statement_list ::=
    statement_list:list statement:s 
    {:  if (s != null) {
            list.add(0, s);
        } 
        RESULT = list; 
    :}
    |   /* Empty */
    {:
        RESULT = new LinkedList<IStatement>();
    :}
    ;
block_statement ::=
    LBRACE:lb statement_list:list RBRACE
    {:
        RESULT = new BlockStatement(lb.line, lb.pos, list);
    :}
    ;

exp ::= 
    LPAREN:lp BYTE:b RPAREN exp:e
    {:
        RESULT = new ByteCast(lp.line, lp.pos, e);
    :}
    | INT_LITERAL:n
    {:
        RESULT = new IntLiteral(n.line, n.pos, n.lexeme, n.value);
    :}
    | COLOR_LITERAL:c
    {:
        RESULT = new ColorLiteral(c.line, c.pos, c.lexeme, c.value);
    :}
    ;


