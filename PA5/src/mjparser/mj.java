
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 26 23:39:46 EST 2018
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.lang.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;
import ast_visitors.*;
import ast.visitor.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 26 23:39:46 EST 2018
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\007\000\002\024" +
    "\002\000\002\007\022\000\002\012\004\000\002\012\002" +
    "\000\002\011\010\000\002\020\005\000\002\020\003\000" +
    "\002\020\002\000\002\017\004\000\002\013\015\000\002" +
    "\014\004\000\002\014\002\000\002\015\005\000\002\016" +
    "\004\000\002\016\002\000\002\021\005\000\002\021\002" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\004\013\000\002\004" +
    "\011\000\002\004\007\000\002\004\011\000\002\004\007" +
    "\000\002\004\011\000\002\004\007\000\002\004\003\000" +
    "\002\004\006\000\002\005\004\000\002\005\002\000\002" +
    "\006\005\000\002\022\005\000\002\022\003\000\002\022" +
    "\002\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\004\000\002\003\010\000\002\003\010\000\002" +
    "\003\006\000\002\003\006\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\004\000\002\003\005\000" +
    "\002\003\003\000\002\003\003\000\002\003\006\000\002" +
    "\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\004\017\005\001\002\000\004\002\251\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\010\001\002\000\004\061\015\001\002\000" +
    "\006\002\ufffc\037\ufffc\001\002\000\006\002\000\037\013" +
    "\001\002\000\004\061\015\001\002\000\006\002\ufffd\037" +
    "\ufffd\001\002\000\036\004\uffc1\005\uffc1\006\uffc1\007\uffc1" +
    "\010\uffc1\011\uffc1\022\uffc1\023\uffc1\024\uffc1\027\uffc1\030" +
    "\uffc1\044\uffc1\045\uffc1\061\uffc1\001\002\000\004\011\017" +
    "\001\002\000\026\012\ufff1\013\ufff1\014\ufff1\015\ufff1\032" +
    "\ufff1\036\ufff1\047\ufff1\050\ufff1\051\ufff1\061\ufff1\001\002" +
    "\000\026\012\ufff4\013\023\014\021\015\033\032\ufff4\036" +
    "\024\047\030\050\027\051\025\061\015\001\002\000\004" +
    "\061\uffec\001\002\000\006\012\036\032\037\001\002\000" +
    "\004\061\uffee\001\002\000\004\061\uffeb\001\002\000\004" +
    "\061\uffe8\001\002\000\004\061\uffe7\001\002\000\004\061" +
    "\uffe9\001\002\000\004\061\uffea\001\002\000\004\061\015" +
    "\001\002\000\076\005\ufff2\007\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\020\ufff2\025\ufff2\026\ufff2\031\ufff2" +
    "\032\ufff2\033\ufff2\036\ufff2\047\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2" +
    "\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\001" +
    "\002\000\004\061\uffed\001\002\000\004\044\035\001\002" +
    "\000\076\005\ufff3\007\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\020\ufff3\025\ufff3\026\ufff3\031\ufff3\032\ufff3" +
    "\033\ufff3\036\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\054" +
    "\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3" +
    "\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\001\002\000" +
    "\006\002\ufffb\037\ufffb\001\002\000\022\013\023\014\021" +
    "\015\033\036\024\047\030\050\027\051\025\061\015\001" +
    "\002\000\006\012\ufff5\032\ufff5\001\002\000\004\061\015" +
    "\001\002\000\004\007\043\001\002\000\026\010\ufff8\013" +
    "\023\014\021\015\033\027\ufff8\036\024\047\030\050\027" +
    "\051\025\061\015\001\002\000\004\061\015\001\002\000" +
    "\006\010\ufff9\027\ufff9\001\002\000\006\010\050\027\047" +
    "\001\002\000\022\013\023\014\021\015\033\036\024\047" +
    "\030\050\027\051\025\061\015\001\002\000\004\011\051" +
    "\001\002\000\074\005\ufff1\007\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\020\ufff1\025\ufff1\026\ufff1\031\ufff1" +
    "\033\ufff1\036\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\054" +
    "\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1" +
    "\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\001\002\000" +
    "\074\005\075\007\065\011\064\012\uffdc\013\023\014\021" +
    "\015\033\020\063\025\057\026\056\031\100\033\uffdc\036" +
    "\024\047\030\050\027\051\025\052\070\054\053\055\101" +
    "\056\102\057\073\060\067\061\015\062\060\063\074\064" +
    "\071\065\076\066\062\067\066\001\002\000\004\007\222" +
    "\001\002\000\056\005\075\007\065\011\064\012\uffdc\020" +
    "\063\025\057\026\056\031\100\033\uffdc\052\070\054\053" +
    "\055\101\056\102\057\073\060\067\061\015\062\060\063" +
    "\074\064\071\065\076\066\062\067\066\001\002\000\024" +
    "\004\uffc4\005\uffc4\006\uffc4\022\uffc4\023\uffc4\024\uffc4\030" +
    "\uffc4\045\175\061\uffe7\001\002\000\004\007\215\001\002" +
    "\000\036\005\075\007\065\025\057\031\100\056\102\057" +
    "\073\060\067\061\015\062\060\063\074\064\071\065\076" +
    "\066\062\067\066\001\002\000\026\004\uffc8\005\uffc8\006" +
    "\uffc8\010\uffc8\022\uffc8\023\uffc8\024\uffc8\027\uffc8\030\uffc8" +
    "\044\uffc8\001\002\000\020\004\111\005\113\006\114\022" +
    "\107\023\112\024\110\030\206\001\002\000\026\004\uffc9" +
    "\005\uffc9\006\uffc9\010\uffc9\022\uffc9\023\uffc9\024\uffc9\027" +
    "\uffc9\030\uffc9\044\uffc9\001\002\000\004\007\200\001\002" +
    "\000\054\005\075\007\065\011\064\012\uffdc\020\063\025" +
    "\057\026\056\031\100\052\070\054\053\055\101\056\102" +
    "\057\073\060\067\061\015\062\060\063\074\064\071\065" +
    "\076\066\062\067\066\001\002\000\040\005\075\007\065" +
    "\015\166\025\057\031\100\056\102\057\073\060\067\061" +
    "\015\062\060\063\074\064\071\065\076\066\062\067\066" +
    "\001\002\000\026\004\uffc3\005\uffc3\006\uffc3\010\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\027\uffc3\030\uffc3\044\uffc3\001\002" +
    "\000\026\004\uffcc\005\uffcc\006\uffcc\010\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\027\uffcc\030\uffcc\044\uffcc\001\002\000\004" +
    "\007\155\001\002\000\026\004\uffcb\005\uffcb\006\uffcb\010" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\027\uffcb\030\uffcb\044\uffcb" +
    "\001\002\000\006\012\uffef\033\150\001\002\000\004\007" +
    "\145\001\002\000\026\004\uffc7\005\uffc7\006\uffc7\010\uffc7" +
    "\022\uffc7\023\uffc7\024\uffc7\027\uffc7\030\uffc7\044\uffc7\001" +
    "\002\000\036\005\075\007\065\025\057\031\100\056\102" +
    "\057\073\060\067\061\015\062\060\063\074\064\071\065" +
    "\076\066\062\067\066\001\002\000\026\004\uffca\005\uffca" +
    "\006\uffca\010\uffca\022\uffca\023\uffca\024\uffca\027\uffca\030" +
    "\uffca\044\uffca\001\002\000\060\005\uffdf\007\uffdf\011\uffdf" +
    "\012\uffdf\020\uffdf\021\uffdf\025\uffdf\026\uffdf\031\uffdf\033" +
    "\uffdf\052\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf" +
    "\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067" +
    "\uffdf\001\002\000\004\061\015\001\002\000\004\007\135" +
    "\001\002\000\004\007\103\001\002\000\036\005\075\007" +
    "\065\025\057\031\100\056\102\057\073\060\067\061\015" +
    "\062\060\063\074\064\071\065\076\066\062\067\066\001" +
    "\002\000\022\004\111\005\113\006\114\022\107\023\112" +
    "\024\110\027\106\030\115\001\002\000\026\004\uffc4\005" +
    "\uffc4\006\uffc4\010\uffc4\022\uffc4\023\uffc4\024\uffc4\027\uffc4" +
    "\030\uffc4\044\uffc4\001\002\000\036\005\075\007\065\025" +
    "\057\031\100\056\102\057\073\060\067\061\015\062\060" +
    "\063\074\064\071\065\076\066\062\067\066\001\002\000" +
    "\036\005\075\007\065\025\057\031\100\056\102\057\073" +
    "\060\067\061\015\062\060\063\074\064\071\065\076\066" +
    "\062\067\066\001\002\000\036\005\075\007\065\025\057" +
    "\031\100\056\102\057\073\060\067\061\015\062\060\063" +
    "\074\064\071\065\076\066\062\067\066\001\002\000\036" +
    "\005\075\007\065\025\057\031\100\056\102\057\073\060" +
    "\067\061\015\062\060\063\074\064\071\065\076\066\062" +
    "\067\066\001\002\000\036\005\075\007\065\025\057\031" +
    "\100\056\102\057\073\060\067\061\015\062\060\063\074" +
    "\064\071\065\076\066\062\067\066\001\002\000\036\005" +
    "\075\007\065\025\057\031\100\056\102\057\073\060\067" +
    "\061\015\062\060\063\074\064\071\065\076\066\062\067" +
    "\066\001\002\000\036\005\075\007\065\025\057\031\100" +
    "\056\102\057\073\060\067\061\015\062\060\063\074\064" +
    "\071\065\076\066\062\067\066\001\002\000\004\061\015" +
    "\001\002\000\004\007\117\001\002\000\042\005\075\007" +
    "\065\010\uffd8\025\057\027\uffd8\031\100\056\102\057\073" +
    "\060\067\061\015\062\060\063\074\064\071\065\076\066" +
    "\062\067\066\001\002\000\024\004\111\005\113\006\114" +
    "\010\uffd9\022\107\023\112\024\110\027\uffd9\030\115\001" +
    "\002\000\006\010\123\027\122\001\002\000\036\005\075" +
    "\007\065\025\057\031\100\056\102\057\073\060\067\061" +
    "\015\062\060\063\074\064\071\065\076\066\062\067\066" +
    "\001\002\000\026\004\uffd0\005\uffd0\006\uffd0\010\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\027\uffd0\030\uffd0\044\uffd0\001\002" +
    "\000\024\004\111\005\113\006\114\010\uffda\022\107\023" +
    "\112\024\110\027\uffda\030\115\001\002\000\026\004\uffd2" +
    "\005\uffd2\006\uffd2\010\uffd2\022\uffd2\023\uffd2\024\uffd2\027" +
    "\uffd2\030\115\044\uffd2\001\002\000\026\004\uffd3\005\uffd3" +
    "\006\114\010\uffd3\022\uffd3\023\uffd3\024\uffd3\027\uffd3\030" +
    "\115\044\uffd3\001\002\000\026\004\111\005\113\006\114" +
    "\010\uffd5\022\107\023\uffd5\024\uffd5\027\uffd5\030\115\044" +
    "\uffd5\001\002\000\026\004\uffd4\005\uffd4\006\114\010\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\027\uffd4\030\115\044\uffd4\001" +
    "\002\000\026\004\111\005\113\006\114\010\uffd7\022\107" +
    "\023\112\024\uffd7\027\uffd7\030\115\044\uffd7\001\002\000" +
    "\026\004\111\005\113\006\114\010\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\027\uffd6\030\115\044\uffd6\001\002\000\022\004" +
    "\111\005\113\006\114\010\134\022\107\023\112\024\110" +
    "\030\115\001\002\000\026\004\uffcf\005\uffcf\006\uffcf\010" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\027\uffcf\030\uffcf\044\uffcf" +
    "\001\002\000\036\005\075\007\065\025\057\031\100\056" +
    "\102\057\073\060\067\061\015\062\060\063\074\064\071" +
    "\065\076\066\062\067\066\001\002\000\022\004\111\005" +
    "\113\006\114\010\137\022\107\023\112\024\110\030\115" +
    "\001\002\000\004\044\140\001\002\000\060\005\uffe4\007" +
    "\uffe4\011\uffe4\012\uffe4\020\uffe4\021\uffe4\025\uffe4\026\uffe4" +
    "\031\uffe4\033\uffe4\052\uffe4\054\uffe4\055\uffe4\056\uffe4\057" +
    "\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\067\uffe4\001\002\000\004\007\142\001\002\000" +
    "\004\010\143\001\002\000\026\004\uffc2\005\uffc2\006\uffc2" +
    "\010\uffc2\022\uffc2\023\uffc2\024\uffc2\027\uffc2\030\uffc2\044" +
    "\uffc2\001\002\000\026\004\uffd1\005\uffd1\006\114\010\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\027\uffd1\030\115\044\uffd1\001" +
    "\002\000\036\005\075\007\065\025\057\031\100\056\102" +
    "\057\073\060\067\061\015\062\060\063\074\064\071\065" +
    "\076\066\062\067\066\001\002\000\022\004\111\005\113" +
    "\006\114\010\147\022\107\023\112\024\110\030\115\001" +
    "\002\000\026\004\uffce\005\uffce\006\uffce\010\uffce\022\uffce" +
    "\023\uffce\024\uffce\027\uffce\030\uffce\044\uffce\001\002\000" +
    "\036\005\075\007\065\025\057\031\100\056\102\057\073" +
    "\060\067\061\015\062\060\063\074\064\071\065\076\066" +
    "\062\067\066\001\002\000\004\012\152\001\002\000\006" +
    "\012\ufff6\032\ufff6\001\002\000\022\004\111\005\113\006" +
    "\114\022\107\023\112\024\110\030\115\044\154\001\002" +
    "\000\004\012\ufff0\001\002\000\036\005\075\007\065\025" +
    "\057\031\100\056\102\057\073\060\067\061\015\062\060" +
    "\063\074\064\071\065\076\066\062\067\066\001\002\000" +
    "\022\004\111\005\113\006\114\022\107\023\112\024\110" +
    "\027\157\030\115\001\002\000\036\005\075\007\065\025" +
    "\057\031\100\056\102\057\073\060\067\061\015\062\060" +
    "\063\074\064\071\065\076\066\062\067\066\001\002\000" +
    "\022\004\111\005\113\006\114\022\107\023\112\024\110" +
    "\027\161\030\115\001\002\000\036\005\075\007\065\025" +
    "\057\031\100\056\102\057\073\060\067\061\015\062\060" +
    "\063\074\064\071\065\076\066\062\067\066\001\002\000" +
    "\022\004\111\005\113\006\114\010\163\022\107\023\112" +
    "\024\110\030\115\001\002\000\004\044\164\001\002\000" +
    "\060\005\uffe6\007\uffe6\011\uffe6\012\uffe6\020\uffe6\021\uffe6" +
    "\025\uffe6\026\uffe6\031\uffe6\033\uffe6\052\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6" +
    "\064\uffe6\065\uffe6\066\uffe6\067\uffe6\001\002\000\022\004" +
    "\111\005\113\006\114\010\171\022\107\023\112\024\110" +
    "\030\115\001\002\000\004\010\167\001\002\000\036\005" +
    "\075\007\065\025\057\031\100\056\102\057\073\060\067" +
    "\061\015\062\060\063\074\064\071\065\076\066\062\067" +
    "\066\001\002\000\026\004\uffcd\005\uffcd\006\uffcd\010\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\027\uffcd\030\uffcd\044\uffcd\001" +
    "\002\000\026\004\uffc5\005\uffc5\006\uffc5\010\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\027\uffc5\030\uffc5\044\uffc5\001\002\000" +
    "\022\004\uffc4\005\uffc4\006\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\030\uffc4\045\175\001\002\000\004\012\174\001\002\000" +
    "\060\005\uffdb\007\uffdb\011\uffdb\012\uffdb\020\uffdb\021\uffdb" +
    "\025\uffdb\026\uffdb\031\uffdb\033\uffdb\052\uffdb\054\uffdb\055" +
    "\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb" +
    "\064\uffdb\065\uffdb\066\uffdb\067\uffdb\001\002\000\036\005" +
    "\075\007\065\025\057\031\100\056\102\057\073\060\067" +
    "\061\015\062\060\063\074\064\071\065\076\066\062\067" +
    "\066\001\002\000\022\004\111\005\113\006\114\022\107" +
    "\023\112\024\110\030\115\044\177\001\002\000\060\005" +
    "\uffde\007\uffde\011\uffde\012\uffde\020\uffde\021\uffde\025\uffde" +
    "\026\uffde\031\uffde\033\uffde\052\uffde\054\uffde\055\uffde\056" +
    "\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde" +
    "\065\uffde\066\uffde\067\uffde\001\002\000\036\005\075\007" +
    "\065\025\057\031\100\056\102\057\073\060\067\061\015" +
    "\062\060\063\074\064\071\065\076\066\062\067\066\001" +
    "\002\000\022\004\111\005\113\006\114\010\202\022\107" +
    "\023\112\024\110\030\115\001\002\000\052\005\075\007" +
    "\065\011\064\020\063\025\057\026\056\031\100\052\070" +
    "\054\053\055\101\056\102\057\073\060\067\061\015\062" +
    "\060\063\074\064\071\065\076\066\062\067\066\001\002" +
    "\000\060\005\uffe2\007\uffe2\011\uffe2\012\uffe2\020\uffe2\021" +
    "\204\025\uffe2\026\uffe2\031\uffe2\033\uffe2\052\uffe2\054\uffe2" +
    "\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063" +
    "\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\001\002\000\052" +
    "\005\075\007\065\011\064\020\063\025\057\026\056\031" +
    "\100\052\070\054\053\055\101\056\102\057\073\060\067" +
    "\061\015\062\060\063\074\064\071\065\076\066\062\067" +
    "\066\001\002\000\060\005\uffe1\007\uffe1\011\uffe1\012\uffe1" +
    "\020\uffe1\021\uffe1\025\uffe1\026\uffe1\031\uffe1\033\uffe1\052" +
    "\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1" +
    "\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\001" +
    "\002\000\004\061\015\001\002\000\004\007\210\001\002" +
    "\000\042\005\075\007\065\010\uffd8\025\057\027\uffd8\031" +
    "\100\056\102\057\073\060\067\061\015\062\060\063\074" +
    "\064\071\065\076\066\062\067\066\001\002\000\006\010" +
    "\212\027\122\001\002\000\022\004\uffd0\005\uffd0\006\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\030\uffd0\044\213\001\002\000" +
    "\060\005\uffe3\007\uffe3\011\uffe3\012\uffe3\020\uffe3\021\uffe3" +
    "\025\uffe3\026\uffe3\031\uffe3\033\uffe3\052\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3" +
    "\064\uffe3\065\uffe3\066\uffe3\067\uffe3\001\002\000\026\004" +
    "\uffc6\005\uffc6\006\uffc6\010\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\027\uffc6\030\115\044\uffc6\001\002\000\036\005\075\007" +
    "\065\025\057\031\100\056\102\057\073\060\067\061\015" +
    "\062\060\063\074\064\071\065\076\066\062\067\066\001" +
    "\002\000\022\004\111\005\113\006\114\010\217\022\107" +
    "\023\112\024\110\030\115\001\002\000\052\005\075\007" +
    "\065\011\064\020\063\025\057\026\056\031\100\052\070" +
    "\054\053\055\101\056\102\057\073\060\067\061\015\062" +
    "\060\063\074\064\071\065\076\066\062\067\066\001\002" +
    "\000\060\005\uffe0\007\uffe0\011\uffe0\012\uffe0\020\uffe0\021" +
    "\uffe0\025\uffe0\026\uffe0\031\uffe0\033\uffe0\052\uffe0\054\uffe0" +
    "\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063" +
    "\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\001\002\000\006" +
    "\012\uffdd\033\uffdd\001\002\000\036\005\075\007\065\025" +
    "\057\031\100\056\102\057\073\060\067\061\015\062\060" +
    "\063\074\064\071\065\076\066\062\067\066\001\002\000" +
    "\022\004\111\005\113\006\114\022\107\023\112\024\110" +
    "\027\224\030\115\001\002\000\036\005\075\007\065\025" +
    "\057\031\100\056\102\057\073\060\067\061\015\062\060" +
    "\063\074\064\071\065\076\066\062\067\066\001\002\000" +
    "\022\004\111\005\113\006\114\010\226\022\107\023\112" +
    "\024\110\030\115\001\002\000\004\044\227\001\002\000" +
    "\060\005\uffe5\007\uffe5\011\uffe5\012\uffe5\020\uffe5\021\uffe5" +
    "\025\uffe5\026\uffe5\031\uffe5\033\uffe5\052\uffe5\054\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5" +
    "\064\uffe5\065\uffe5\066\uffe5\067\uffe5\001\002\000\006\010" +
    "\ufffa\027\ufffa\001\002\000\006\010\ufff7\027\ufff7\001\002" +
    "\000\004\011\233\001\002\000\004\032\234\001\002\000" +
    "\004\034\235\001\002\000\004\036\236\001\002\000\004" +
    "\016\237\001\002\000\004\007\240\001\002\000\004\035" +
    "\241\001\002\000\004\041\242\001\002\000\004\042\243" +
    "\001\002\000\004\061\015\001\002\000\004\010\245\001" +
    "\002\000\004\011\064\001\002\000\004\012\uffff\001\002" +
    "\000\004\012\250\001\002\000\006\002\ufffe\037\ufffe\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\010\001\001" +
    "\000\004\023\231\001\001\000\004\012\011\001\001\000" +
    "\004\011\013\001\001\000\004\023\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\017\001\001\000\012\010\030\014\021\015\031\023\025" +
    "\001\001\000\002\001\001\000\004\013\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\040\023\025\001\001\000\002\001\001\000\004\023\041" +
    "\001\001\000\002\001\001\000\012\010\043\017\044\020" +
    "\045\023\025\001\001\000\004\023\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\043\017\227\023" +
    "\025\001\001\000\002\001\001\000\004\016\051\001\001" +
    "\000\020\003\060\004\053\005\071\006\076\010\030\015" +
    "\031\023\054\001\001\000\002\001\001\000\014\003\060" +
    "\004\053\005\220\006\076\023\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\213\023\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\060\004\053\005\172\006\076" +
    "\023\171\001\001\000\006\003\164\023\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\143\023\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\103\023\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\132\023\104\001\001\000\006\003\131\023\104\001\001" +
    "\000\006\003\130\023\104\001\001\000\006\003\127\023" +
    "\104\001\001\000\006\003\126\023\104\001\001\000\006" +
    "\003\125\023\104\001\001\000\006\003\124\023\104\001" +
    "\001\000\004\023\115\001\001\000\002\001\001\000\010" +
    "\003\117\022\120\023\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\123\023\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\135\023\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\145" +
    "\023\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\152\023\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\155\023\104\001\001\000\002\001\001\000\006\003\157" +
    "\023\104\001\001\000\002\001\001\000\006\003\161\023" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\167\023\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\175\023\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\200\023\104\001\001\000\002\001" +
    "\001\000\012\003\060\004\202\006\076\023\171\001\001" +
    "\000\002\001\001\000\012\003\060\004\204\006\076\023" +
    "\171\001\001\000\002\001\001\000\004\023\206\001\001" +
    "\000\002\001\001\000\010\003\117\022\210\023\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\215\023\104\001\001\000" +
    "\002\001\001\000\012\003\060\004\217\006\076\023\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\222\023\104\001\001\000\002\001\001\000\006\003\224" +
    "\023\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\243\001" +
    "\001\000\002\001\001\000\004\006\245\001\001\000\004" +
    "\024\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // identifier ::= ID 
            {
              ILiteral RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new IdLiteral(i.line, i.pos, i.lexeme);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("identifier",17, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= NEW identifier LPAREN RPAREN 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		ILiteral id = (ILiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        RESULT = new NewExp(n.line, n.pos, id.getLexeme());
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= THIS 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ThisLiteral(t.line, t.pos, t.lexeme, t.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= identifier 
            {
              IExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		ILiteral id = (ILiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = id;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = e;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= NOT exp 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new NotExp(n.line, n.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= FALSE 
            {
              IExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue f = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new FalseLiteral(f.line, f.pos, f.lexeme, f.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= TRUE 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new TrueLiteral(t.line, t.pos, t.lexeme, t.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= TONE_LITERAL 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ToneLiteral(t.line, t.pos, t.lexeme, t.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= BUTTON_LITERAL 
            {
              IExp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ButtonLiteral(b.line, b.pos, b.lexeme, b.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ColorLiteral(c.line, c.pos, c.lexeme, c.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new IntLiteral(n.line, n.pos, n.lexeme, n.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= LPAREN BYTE RPAREN exp 
            {
              IExp RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue lp = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ByteCast(lp.line, lp.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= MEGGYCHECKBUTTON LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new MeggyCheckButton(m.line, m.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new MeggyGetPixel(m.line, m.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp DOT identifier LPAREN exp_args_list RPAREN 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		ILiteral id = (ILiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IExp> list = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new CallExp(e1.getLine(), e1.getPos(), e1, id.getLexeme(), list);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= MINUS exp 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new NegExp(m.line, m.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp TIMES exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new MulExp(op.line, op.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp MINUS exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new MinusExp(op.line, op.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp PLUS exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new PlusExp(op.line, op.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp EQUAL exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue eq = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new EqualExp(eq.line, eq.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp LT exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue lt = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new LtExp(lt.line, lt.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp AND exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new AndExp(op.line, op.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp_args_list ::= 
            {
              LinkedList<IExp> RESULT =null;
		
        RESULT = new LinkedList<IExp>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp_args_list",16, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp_args_list ::= exp 
            {
              LinkedList<IExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        LinkedList<IExp> list = new LinkedList<IExp>();
        if (e != null) {
            list.add(e);
        }
        RESULT = list;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp_args_list",16, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp_args_list ::= exp_args_list COMMA exp 
            {
              LinkedList<IExp> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> list = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        if (e != null) {
            list.add(e);
        }
        RESULT = list;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp_args_list",16, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // block_statement ::= LBRACE statement_list RBRACE 
            {
              BlockStatement RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue lb = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IStatement> list = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new BlockStatement(lb.line, lb.pos, list);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("block_statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement_list ::= 
            {
              LinkedList<IStatement> RESULT =null;
		
        RESULT = new LinkedList<IStatement>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement_list ::= statement statement_list 
            {
              LinkedList<IStatement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IStatement> list = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  if (s != null) {
            list.add(0, s);
        } 
        RESULT = list; 
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= identifier ASSIGN exp SEMI 
            {
              IStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		ILiteral id = (ILiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new AssignStatement(id.getLine(), id.getPos(), id.getLexeme(), e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= block_statement 
            {
              IStatement RESULT =null;
		int blkleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		BlockStatement blk = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = blk;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= WHILE LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue w = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new WhileStatement(w.line, w.pos, e, s);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= IF LPAREN exp RPAREN statement ELSE statement 
            {
              IStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement s1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new IfStatement(i.line, i.pos, e, s1, s2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= IF LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new IfStatement(i.line, i.pos, e, s, null);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= exp DOT identifier LPAREN exp_args_list RPAREN SEMI 
            {
              IStatement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		ILiteral id = (ILiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IExp> list = (LinkedList<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        RESULT = new CallStatement(e1.getLine(), e1.getPos(), e1, id.getLexeme(), list);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= MEGGYDELAY LPAREN exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue md = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        RESULT = new MeggyDelay(md.line, md.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue mt = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        RESULT = new MeggyToneStart(mt.line, mt.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mspleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int mspright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue msp = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e3 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        RESULT = new MeggySetPixel(msp.line, msp.pos, e1, e2, e3);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= identifier 
            {
              IType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		ILiteral id = (ILiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ClassType(id.getLine(), id.getPos(), id.getLexeme());
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= MEGGYTONE 
            {
              IType RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ToneType(m.line, m.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= MEGGYBUTTON 
            {
              IType RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ButtonType(m.line, m.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= MEGGYCOLOR 
            {
              IType RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ColorType(m.line, m.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= VOID 
            {
              IType RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue v = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new VoidType(v.line, v.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= INT 
            {
              IType RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new IntType(i.line, i.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= BYTE 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ByteType(b.line, b.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= BOOLEAN 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new BoolType(b.line, b.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // return_stmt ::= 
            {
              IExp RESULT =null;
		
        RESULT = null;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("return_stmt",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // return_stmt ::= RETURN exp SEMI 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = e;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("return_stmt",15, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_declaration_list ::= 
            {
              LinkedList<VarDecl> RESULT =null;
		
        RESULT = new LinkedList<VarDecl>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("var_declaration_list",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_declaration_list ::= var_declaration_list var_declaration 
            {
              LinkedList<VarDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<VarDecl> list = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        if (v != null) {
            list.add(v);
        }
        RESULT = list;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("var_declaration_list",12, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_declaration ::= type identifier SEMI 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		ILiteral id = (ILiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new VarDecl(id.getLine(), id.getPos(), t, id.getLexeme());
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("var_declaration",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method_declaration_list ::= 
            {
              LinkedList<MethodDecl> RESULT =null;
		
        RESULT = new LinkedList<MethodDecl>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_declaration_list",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method_declaration_list ::= method_declaration_list method_declaration 
            {
              LinkedList<MethodDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> list = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MethodDecl m = (MethodDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        if (m != null) {
            list.add(m);
        }
        RESULT = list;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_declaration_list",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_declaration ::= PUBLIC type identifier LPAREN formal_param_list RPAREN LBRACE var_declaration_list statement_list return_stmt RBRACE 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		ILiteral id = (ILiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		LinkedList<Formal> params = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		LinkedList<VarDecl> vars = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IStatement> stmts = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp ret = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new MethodDecl(id.getLine(), id.getPos(), t, id.getLexeme(), params, vars, stmts, ret);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_declaration",9, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formal_param ::= type identifier 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		ILiteral id = (ILiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new Formal(t.getLine(), t.getPos(), t, id.getLexeme());
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_param",13, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // formal_param_list ::= 
            {
              LinkedList<Formal> RESULT =null;
		
        RESULT = new LinkedList<Formal>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_param_list",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // formal_param_list ::= formal_param 
            {
              LinkedList<Formal> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Formal param = (Formal)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        LinkedList<Formal> list = new LinkedList<Formal>();
        list.add(param);
        RESULT = list;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_param_list",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // formal_param_list ::= formal_param_list COMMA formal_param 
            {
              LinkedList<Formal> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<Formal> list = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Formal param = (Formal)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        if (param != null) {
            list.add(param);
        }
        RESULT = list;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_param_list",14, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_declaration ::= CLASS identifier LBRACE var_declaration_list method_declaration_list RBRACE 
            {
              TopClassDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		ILiteral id = (ILiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<VarDecl> vars = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> methods = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new TopClassDecl(id.getLine(), id.getPos(), id.getLexeme(), vars, methods);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_declaration",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_declaration_list ::= 
            {
              LinkedList<IClassDecl> RESULT =null;
		
        RESULT = new LinkedList<IClassDecl>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_declaration_list",8, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_declaration_list ::= class_declaration_list class_declaration 
            {
              LinkedList<IClassDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IClassDecl> list = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		TopClassDecl c = (TopClassDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        if (c != null) {
            list.add(c);
        }
        RESULT = list;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_declaration_list",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_class ::= CLASS identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET identifier RPAREN block_statement NT$0 RBRACE 
            {
              MainClass RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int class_nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).left;
		int class_nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).right;
		ILiteral class_name = (ILiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-14)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int param_nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int param_nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		ILiteral param_name = (ILiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		BlockStatement stmts = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-15)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              MainClass RESULT =null;
		int class_nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)).left;
		int class_nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)).right;
		ILiteral class_name = (ILiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-12)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int param_nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int param_nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		ILiteral param_name = (ILiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		BlockStatement stmts = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;

            RESULT = new MainClass(m.line, m.pos, class_name.getLexeme(), param_name.getLexeme(), stmts);
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$0",18, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= IMPORT MEGGY SEMI main_class class_declaration_list 
            {
              Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int class_listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int class_listright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IClassDecl> class_list = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new Program(i.line, i.pos, m, class_list); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

